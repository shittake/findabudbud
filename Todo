{/*

1. Get data from supabase

        const [users, setUsers] = useState([]);

        const fetchData = async () => {
                const {data, error} = await supabase
                .from('profiles')
                .select('*')

                setUsers(data);

        }

        useEffect(() => {
                fetchData();
        },[])

2. To get user's row from supabase


        users.filter(user => user.id == session.user.id);

3. To get user's points
        
        users.filter(user => user.id == session.user.id).map(user => user.points);

        OR sometimes this works instead:

        users.filter(user => user.id == session.user.id).map((val,key) => val.points)

4. To add toggle button for any preference

{/* Toggle button to change preference for Brawl Stars */}
      <div>
        <button onClick={() => handleBrawlStarsChange()}>
          Brawl Stars?
        </button>
        {brawl_stars
          ? " Yes I love Brawl Stars!"
          : " Not really interested"}
      </div>

5. To update a user's points (or any other thing): (Don't forget to include a hook [loading,setLoading] before this)

const updatePoints = async (number) => {
    setLoading(true);
    try {
      const user = supabase.auth.user();

      const { error } = await supabase
        .from("profiles")
        .update({points: points+number}) // go to this column
        .eq('id', session.user.id)   // find the specific user

      if (error) throw error;

    } catch (error) {
      alert(error.error_description || error.message);
    } finally {
      setLoading(false);
        window.location.reload(false); // force the page to refresh
    }
  };


*/}

//point system logic
//point history
//add more buttons (food, sports, academia)
//tutorial walkthrough
//matching waiting room
//events --> creator capacity of each event
//events --> indicate
//events --> last min dw then penalty

//Felicia:
// 1. uniform styling on NewEvent.js navbar