{"ast":null,"code":"import _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Transformers } from '@supabase/realtime-js';\nexport var SupabaseRealtimeClient = /*#__PURE__*/function () {\n  function SupabaseRealtimeClient(socket, headers, schema, tableName) {\n    _classCallCheck(this, SupabaseRealtimeClient);\n\n    var chanParams = {};\n    var topic = tableName === '*' ? \"realtime:\".concat(schema) : \"realtime:\".concat(schema, \":\").concat(tableName);\n    var userToken = headers['Authorization'].split(' ')[1];\n\n    if (userToken) {\n      chanParams['user_token'] = userToken;\n    }\n\n    this.subscription = socket.channel(topic, chanParams);\n  }\n\n  _createClass(SupabaseRealtimeClient, [{\n    key: \"getPayloadRecords\",\n    value: function getPayloadRecords(payload) {\n      var records = {\n        new: {},\n        old: {}\n      };\n\n      if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n        records.new = Transformers.convertChangeData(payload.columns, payload.record);\n      }\n\n      if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n        records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n      }\n\n      return records;\n    }\n    /**\n     * The event you want to listen to.\n     *\n     * @param event The event\n     * @param callback A callback function that is called whenever the event occurs.\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      var _this = this;\n\n      this.subscription.on(event, function (payload) {\n        var enrichedPayload = {\n          schema: payload.schema,\n          table: payload.table,\n          commit_timestamp: payload.commit_timestamp,\n          eventType: payload.type,\n          new: {},\n          old: {},\n          errors: payload.errors\n        };\n        enrichedPayload = Object.assign(Object.assign({}, enrichedPayload), _this.getPayloadRecords(payload));\n        callback(enrichedPayload);\n      });\n      return this;\n    }\n    /**\n     * Enables the subscription.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe() {\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n      this.subscription.onError(function (e) {\n        return callback('SUBSCRIPTION_ERROR', e);\n      });\n      this.subscription.onClose(function () {\n        return callback('CLOSED');\n      });\n      this.subscription.subscribe().receive('ok', function () {\n        return callback('SUBSCRIBED');\n      }).receive('error', function (e) {\n        return callback('SUBSCRIPTION_ERROR', e);\n      }).receive('timeout', function () {\n        return callback('RETRYING_AFTER_TIMEOUT');\n      });\n      return this.subscription;\n    }\n  }]);\n\n  return SupabaseRealtimeClient;\n}();","map":{"version":3,"sources":["../../../src/lib/SupabaseRealtimeClient.ts"],"names":[],"mappings":";;AAAA,SAA+C,YAA/C,QAAmE,uBAAnE;AAGA,WAAa,sBAAb;EAGE,gCAAY,MAAZ,EAAoC,OAApC,EAA4D,MAA5D,EAA4E,SAA5E,EAA6F;IAAA;;IAC3F,IAAM,UAAU,GAAkB,EAAlC;IACA,IAAM,KAAK,GAAG,SAAS,KAAK,GAAd,sBAAgC,MAAhC,uBAAuD,MAAvD,cAAiE,SAAjE,CAAd;IACA,IAAM,SAAS,GAAG,OAAO,CAAC,eAAD,CAAP,CAAyB,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAlB;;IAEA,IAAI,SAAJ,EAAe;MACb,UAAU,CAAC,YAAD,CAAV,GAA2B,SAA3B;IACD;;IAED,KAAK,YAAL,GAAoB,MAAM,CAAC,OAAP,CAAe,KAAf,EAAsB,UAAtB,CAApB;EACD;;EAbH;IAAA;IAAA,OAeU,2BAAkB,OAAlB,EAA8B;MACpC,IAAM,OAAO,GAAG;QACd,GAAG,EAAE,EADS;QAEd,GAAG,EAAE;MAFS,CAAhB;;MAKA,IAAI,OAAO,CAAC,IAAR,KAAiB,QAAjB,IAA6B,OAAO,CAAC,IAAR,KAAiB,QAAlD,EAA4D;QAC1D,OAAO,CAAC,GAAR,GAAc,YAAY,CAAC,iBAAb,CAA+B,OAAO,CAAC,OAAvC,EAAgD,OAAO,CAAC,MAAxD,CAAd;MACD;;MAED,IAAI,OAAO,CAAC,IAAR,KAAiB,QAAjB,IAA6B,OAAO,CAAC,IAAR,KAAiB,QAAlD,EAA4D;QAC1D,OAAO,CAAC,GAAR,GAAc,YAAY,CAAC,iBAAb,CAA+B,OAAO,CAAC,OAAvC,EAAgD,OAAO,CAAC,UAAxD,CAAd;MACD;;MAED,OAAO,OAAP;IACD;IAED;;;;;AAKG;;EArCL;IAAA;IAAA,OAsCE,YAAG,KAAH,EAA8B,QAA9B,EAAuF;MAAA;;MACrF,KAAK,YAAL,CAAkB,EAAlB,CAAqB,KAArB,EAA4B,UAAC,OAAD,EAAiB;QAC3C,IAAI,eAAe,GAAiC;UAClD,MAAM,EAAE,OAAO,CAAC,MADkC;UAElD,KAAK,EAAE,OAAO,CAAC,KAFmC;UAGlD,gBAAgB,EAAE,OAAO,CAAC,gBAHwB;UAIlD,SAAS,EAAE,OAAO,CAAC,IAJ+B;UAKlD,GAAG,EAAE,EAL6C;UAMlD,GAAG,EAAE,EAN6C;UAOlD,MAAM,EAAE,OAAO,CAAC;QAPkC,CAApD;QAUA,eAAe,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,eAAR,CAAA,EAA4B,KAAI,CAAC,iBAAL,CAAuB,OAAvB,CAA5B,CAAf;QAEA,QAAQ,CAAC,eAAD,CAAR;MACD,CAdD;MAeA,OAAO,IAAP;IACD;IAED;;AAEG;;EA3DL;IAAA;IAAA,OA4DE,qBAAuC;MAAA,IAA7B,QAA6B,uEAAR,YAAK,CAAG,CAAA;MACrC,KAAK,YAAL,CAAkB,OAAlB,CAA0B,UAAC,CAAD;QAAA,OAAc,QAAQ,CAAC,oBAAD,EAAuB,CAAvB,CAAtB;MAAA,CAA1B;MACA,KAAK,YAAL,CAAkB,OAAlB,CAA0B;QAAA,OAAM,QAAQ,CAAC,QAAD,CAAd;MAAA,CAA1B;MACA,KAAK,YAAL,CACG,SADH,GAEG,OAFH,CAEW,IAFX,EAEiB;QAAA,OAAM,QAAQ,CAAC,YAAD,CAAd;MAAA,CAFjB,EAGG,OAHH,CAGW,OAHX,EAGoB,UAAC,CAAD;QAAA,OAAc,QAAQ,CAAC,oBAAD,EAAuB,CAAvB,CAAtB;MAAA,CAHpB,EAIG,OAJH,CAIW,SAJX,EAIsB;QAAA,OAAM,QAAQ,CAAC,wBAAD,CAAd;MAAA,CAJtB;MAKA,OAAO,KAAK,YAAZ;IACD;EArEH;;EAAA;AAAA","sourceRoot":"","sourcesContent":["import { Transformers } from '@supabase/realtime-js';\nexport class SupabaseRealtimeClient {\n    constructor(socket, headers, schema, tableName) {\n        const chanParams = {};\n        const topic = tableName === '*' ? `realtime:${schema}` : `realtime:${schema}:${tableName}`;\n        const userToken = headers['Authorization'].split(' ')[1];\n        if (userToken) {\n            chanParams['user_token'] = userToken;\n        }\n        this.subscription = socket.channel(topic, chanParams);\n    }\n    getPayloadRecords(payload) {\n        const records = {\n            new: {},\n            old: {},\n        };\n        if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n            records.new = Transformers.convertChangeData(payload.columns, payload.record);\n        }\n        if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n            records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n        }\n        return records;\n    }\n    /**\n     * The event you want to listen to.\n     *\n     * @param event The event\n     * @param callback A callback function that is called whenever the event occurs.\n     */\n    on(event, callback) {\n        this.subscription.on(event, (payload) => {\n            let enrichedPayload = {\n                schema: payload.schema,\n                table: payload.table,\n                commit_timestamp: payload.commit_timestamp,\n                eventType: payload.type,\n                new: {},\n                old: {},\n                errors: payload.errors,\n            };\n            enrichedPayload = Object.assign(Object.assign({}, enrichedPayload), this.getPayloadRecords(payload));\n            callback(enrichedPayload);\n        });\n        return this;\n    }\n    /**\n     * Enables the subscription.\n     */\n    subscribe(callback = () => { }) {\n        this.subscription.onError((e) => callback('SUBSCRIPTION_ERROR', e));\n        this.subscription.onClose(() => callback('CLOSED'));\n        this.subscription\n            .subscribe()\n            .receive('ok', () => callback('SUBSCRIBED'))\n            .receive('error', (e) => callback('SUBSCRIPTION_ERROR', e))\n            .receive('timeout', () => callback('RETRYING_AFTER_TIMEOUT'));\n        return this.subscription;\n    }\n}\n//# sourceMappingURL=SupabaseRealtimeClient.js.map"]},"metadata":{},"sourceType":"module"}