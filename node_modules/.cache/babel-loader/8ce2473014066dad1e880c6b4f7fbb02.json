{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { get, post, remove as _remove } from './fetch';\nimport { resolveFetch } from './helpers';\nvar DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nvar DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport var StorageFileApi = /*#__PURE__*/function () {\n  function StorageFileApi(url) {\n    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    var fetch = arguments.length > 3 ? arguments[3] : undefined;\n\n    _classCallCheck(this, StorageFileApi);\n\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n\n\n  _createClass(StorageFileApi, [{\n    key: \"uploadOrUpdate\",\n    value: function uploadOrUpdate(method, path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var body, options, headers, cleanPath, _path, res, error;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n                  'x-upsert': String(options.upsert)\n                });\n\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                  body = new FormData();\n                  body.append('cacheControl', options.cacheControl);\n                  body.append('', fileBody);\n                } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                  body = fileBody;\n                  body.append('cacheControl', options.cacheControl);\n                } else {\n                  body = fileBody;\n                  headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n                  headers['content-type'] = options.contentType;\n                }\n\n                cleanPath = this._removeEmptyFolders(path);\n                _path = this._getFinalPath(cleanPath);\n                _context.next = 8;\n                return this.fetch(\"\".concat(this.url, \"/object/\").concat(_path), {\n                  method: method,\n                  body: body,\n                  headers: headers\n                });\n\n              case 8:\n                res = _context.sent;\n\n                if (!res.ok) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  data: {\n                    Key: _path\n                  },\n                  error: null\n                });\n\n              case 13:\n                _context.next = 15;\n                return res.json();\n\n              case 15:\n                error = _context.sent;\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: error\n                });\n\n              case 17:\n                _context.next = 22;\n                break;\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](0);\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: _context.t0\n                });\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 19]]);\n      }));\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     * @param fileOptions HTTP headers.\n     * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n     * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n     * `upsert`: boolean, whether to perform an upsert.\n     */\n\n  }, {\n    key: \"upload\",\n    value: function upload(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.uploadOrUpdate('POST', path, fileBody, fileOptions));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     * @param fileOptions HTTP headers.\n     * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n     * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n     * `upsert`: boolean, whether to perform an upsert.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.uploadOrUpdate('PUT', path, fileBody, fileOptions));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * Moves an existing file.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     */\n\n  }, {\n    key: \"move\",\n    value: function move(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/object/move\"), {\n                  bucketId: this.bucketId,\n                  sourceKey: fromPath,\n                  destinationKey: toPath\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n                return _context4.abrupt(\"return\", {\n                  data: null,\n                  error: _context4.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Copies an existing file.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/object/copy\"), {\n                  bucketId: this.bucketId,\n                  sourceKey: fromPath,\n                  destinationKey: toPath\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](0);\n                return _context5.abrupt(\"return\", {\n                  data: null,\n                  error: _context5.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Create signed URL to download file without requiring permissions. This URL can be valid for a set number of seconds.\n     *\n     * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     */\n\n  }, {\n    key: \"createSignedUrl\",\n    value: function createSignedUrl(path, expiresIn) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var _path, data, signedURL;\n\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _path = this._getFinalPath(path);\n                _context6.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(_path), {\n                  expiresIn: expiresIn\n                }, {\n                  headers: this.headers\n                });\n\n              case 4:\n                data = _context6.sent;\n                signedURL = \"\".concat(this.url).concat(data.signedURL);\n                data = {\n                  signedURL: signedURL\n                };\n                return _context6.abrupt(\"return\", {\n                  data: data,\n                  error: null,\n                  signedURL: signedURL\n                });\n\n              case 10:\n                _context6.prev = 10;\n                _context6.t0 = _context6[\"catch\"](0);\n                return _context6.abrupt(\"return\", {\n                  data: null,\n                  error: _context6.t0,\n                  signedURL: null\n                });\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 10]]);\n      }));\n    }\n    /**\n     * Create signed URLs to download files without requiring permissions. These URLs can be valid for a set number of seconds.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     */\n\n  }, {\n    key: \"createSignedUrls\",\n    value: function createSignedUrls(paths, expiresIn) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var _this = this;\n\n        var data;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n                _context7.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(this.bucketId), {\n                  expiresIn: expiresIn,\n                  paths: paths\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  data: data.map(function (datum) {\n                    return Object.assign(Object.assign({}, datum), {\n                      signedURL: datum.signedURL ? \"\".concat(_this.url).concat(datum.signedURL) : null\n                    });\n                  }),\n                  error: null\n                });\n\n              case 7:\n                _context7.prev = 7;\n                _context7.t0 = _context7[\"catch\"](0);\n                return _context7.abrupt(\"return\", {\n                  data: null,\n                  error: _context7.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Downloads a file.\n     *\n     * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n     */\n\n  }, {\n    key: \"download\",\n    value: function download(path) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var _path, res, data;\n\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _path = this._getFinalPath(path);\n                _context8.next = 4;\n                return get(this.fetch, \"\".concat(this.url, \"/object/\").concat(_path), {\n                  headers: this.headers,\n                  noResolveJson: true\n                });\n\n              case 4:\n                res = _context8.sent;\n                _context8.next = 7;\n                return res.blob();\n\n              case 7:\n                data = _context8.sent;\n                return _context8.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 11:\n                _context8.prev = 11;\n                _context8.t0 = _context8[\"catch\"](0);\n                return _context8.abrupt(\"return\", {\n                  data: null,\n                  error: _context8.t0\n                });\n\n              case 14:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 11]]);\n      }));\n    }\n    /**\n     * Retrieve URLs for assets in public buckets\n     *\n     * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n     */\n\n  }, {\n    key: \"getPublicUrl\",\n    value: function getPublicUrl(path) {\n      try {\n        var _path = this._getFinalPath(path);\n\n        var publicURL = \"\".concat(this.url, \"/object/public/\").concat(_path);\n        var data = {\n          publicURL: publicURL\n        };\n        return {\n          data: data,\n          error: null,\n          publicURL: publicURL\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error: error,\n          publicURL: null\n        };\n      }\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to be deleted, including the path and file name. For example [`folder/image.png`].\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(paths) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                _context9.next = 3;\n                return _remove(this.fetch, \"\".concat(this.url, \"/object/\").concat(this.bucketId), {\n                  prefixes: paths\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context9.sent;\n                return _context9.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context9.prev = 7;\n                _context9.t0 = _context9[\"catch\"](0);\n                return _context9.abrupt(\"return\", {\n                  data: null,\n                  error: _context9.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n    //   try {\n    //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     return { data: null, error }\n    //   }\n    // }\n\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<{ data: Metadata | null; error: Error | null }> {\n    //   try {\n    //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     return { data: null, error }\n    //   }\n    // }\n\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     * @param options Search options, including `limit`, `offset`, and `sortBy`.\n     * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n     */\n\n  }, {\n    key: \"list\",\n    value: function list(path, options, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var body, data;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n                  prefix: path || ''\n                });\n                _context10.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/object/list/\").concat(this.bucketId), body, {\n                  headers: this.headers\n                }, parameters);\n\n              case 4:\n                data = _context10.sent;\n                return _context10.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 8:\n                _context10.prev = 8;\n                _context10.t0 = _context10[\"catch\"](0);\n                return _context10.abrupt(\"return\", {\n                  data: null,\n                  error: _context10.t0\n                });\n\n              case 11:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[0, 8]]);\n      }));\n    }\n  }, {\n    key: \"_getFinalPath\",\n    value: function _getFinalPath(path) {\n      return \"\".concat(this.bucketId, \"/\").concat(path);\n    }\n  }, {\n    key: \"_removeEmptyFolders\",\n    value: function _removeEmptyFolders(path) {\n      return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n  }]);\n\n  return StorageFileApi;\n}();","map":{"version":3,"mappings":"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","names":["get","post","remove","resolveFetch","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","url","headers","bucketId","fetch","method","path","fileBody","fileOptions","options","Object","String","Blob","body","FormData","append","cleanPath","_removeEmptyFolders","_path","_getFinalPath","res","ok","data","Key","error","json","uploadOrUpdate","fromPath","toPath","sourceKey","destinationKey","expiresIn","signedURL","paths","map","datum","noResolveJson","blob","publicURL","prefixes","parameters","prefix","replace"],"sourceRoot":"","sources":["../../../src/lib/StorageFileApi.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}