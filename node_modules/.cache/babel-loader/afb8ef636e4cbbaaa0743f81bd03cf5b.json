{"ast":null,"code":"/**\n * Helpers to convert the change Payload into native JS types.\n */\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\nexport var PostgresTypes;\n\n(function (PostgresTypes) {\n  PostgresTypes[\"abstime\"] = \"abstime\";\n  PostgresTypes[\"bool\"] = \"bool\";\n  PostgresTypes[\"date\"] = \"date\";\n  PostgresTypes[\"daterange\"] = \"daterange\";\n  PostgresTypes[\"float4\"] = \"float4\";\n  PostgresTypes[\"float8\"] = \"float8\";\n  PostgresTypes[\"int2\"] = \"int2\";\n  PostgresTypes[\"int4\"] = \"int4\";\n  PostgresTypes[\"int4range\"] = \"int4range\";\n  PostgresTypes[\"int8\"] = \"int8\";\n  PostgresTypes[\"int8range\"] = \"int8range\";\n  PostgresTypes[\"json\"] = \"json\";\n  PostgresTypes[\"jsonb\"] = \"jsonb\";\n  PostgresTypes[\"money\"] = \"money\";\n  PostgresTypes[\"numeric\"] = \"numeric\";\n  PostgresTypes[\"oid\"] = \"oid\";\n  PostgresTypes[\"reltime\"] = \"reltime\";\n  PostgresTypes[\"text\"] = \"text\";\n  PostgresTypes[\"time\"] = \"time\";\n  PostgresTypes[\"timestamp\"] = \"timestamp\";\n  PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n  PostgresTypes[\"timetz\"] = \"timetz\";\n  PostgresTypes[\"tsrange\"] = \"tsrange\";\n  PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n})(PostgresTypes || (PostgresTypes = {}));\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\n\n\nexport var convertChangeData = function convertChangeData(columns, record) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _a;\n\n  var skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n  return Object.keys(record).reduce(function (acc, rec_key) {\n    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\n    return acc;\n  }, {});\n};\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\n\nexport var convertColumn = function convertColumn(columnName, columns, record, skipTypes) {\n  var column = columns.find(function (x) {\n    return x.name === columnName;\n  });\n  var colType = column === null || column === void 0 ? void 0 : column.type;\n  var value = record[columnName];\n\n  if (colType && !skipTypes.includes(colType)) {\n    return convertCell(colType, value);\n  }\n\n  return noop(value);\n};\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} stringValue The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\n\nexport var convertCell = function convertCell(type, value) {\n  // if data type is an array\n  if (type.charAt(0) === '_') {\n    var dataType = type.slice(1, type.length);\n    return toArray(value, dataType);\n  } // If not null, convert to correct type.\n\n\n  switch (type) {\n    case PostgresTypes.bool:\n      return toBoolean(value);\n\n    case PostgresTypes.float4:\n    case PostgresTypes.float8:\n    case PostgresTypes.int2:\n    case PostgresTypes.int4:\n    case PostgresTypes.int8:\n    case PostgresTypes.numeric:\n    case PostgresTypes.oid:\n      return toNumber(value);\n\n    case PostgresTypes.json:\n    case PostgresTypes.jsonb:\n      return toJson(value);\n\n    case PostgresTypes.timestamp:\n      return toTimestampString(value);\n    // Format to be consistent with PostgREST\n\n    case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.date: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.daterange:\n    case PostgresTypes.int4range:\n    case PostgresTypes.int8range:\n    case PostgresTypes.money:\n    case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.text:\n    case PostgresTypes.time: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.tsrange:\n    case PostgresTypes.tstzrange:\n      return noop(value);\n\n    default:\n      // Return the value for remaining types\n      return noop(value);\n  }\n};\n\nvar noop = function noop(value) {\n  return value;\n};\n\nexport var toBoolean = function toBoolean(value) {\n  switch (value) {\n    case 't':\n      return true;\n\n    case 'f':\n      return false;\n\n    default:\n      return value;\n  }\n};\nexport var toNumber = function toNumber(value) {\n  if (typeof value === 'string') {\n    var parsedValue = parseFloat(value);\n\n    if (!Number.isNaN(parsedValue)) {\n      return parsedValue;\n    }\n  }\n\n  return value;\n};\nexport var toJson = function toJson(value) {\n  if (typeof value === 'string') {\n    try {\n      return JSON.parse(value);\n    } catch (error) {\n      console.log(\"JSON parse error: \".concat(error));\n      return value;\n    }\n  }\n\n  return value;\n};\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\n\nexport var toArray = function toArray(value, type) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  var lastIdx = value.length - 1;\n  var closeBrace = value[lastIdx];\n  var openBrace = value[0]; // Confirm value is a Postgres array by checking curly brackets\n\n  if (openBrace === '{' && closeBrace === '}') {\n    var arr;\n    var valTrim = value.slice(1, lastIdx); // TODO: find a better solution to separate Postgres array data\n\n    try {\n      arr = JSON.parse('[' + valTrim + ']');\n    } catch (_) {\n      // WARNING: splitting on comma does not cover all edge cases\n      arr = valTrim ? valTrim.split(',') : [];\n    }\n\n    return arr.map(function (val) {\n      return convertCell(type, val);\n    });\n  }\n\n  return value;\n};\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\n\nexport var toTimestampString = function toTimestampString(value) {\n  if (typeof value === 'string') {\n    return value.replace(' ', 'T');\n  }\n\n  return value;\n};","map":{"version":3,"sources":["../../../src/lib/transformers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * Helpers to convert the change Payload into native JS types.\n */\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\nexport var PostgresTypes;\n(function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n})(PostgresTypes || (PostgresTypes = {}));\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\nexport const convertChangeData = (columns, record, options = {}) => {\n    var _a;\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    return Object.keys(record).reduce((acc, rec_key) => {\n        acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\n        return acc;\n    }, {});\n};\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\nexport const convertColumn = (columnName, columns, record, skipTypes) => {\n    const column = columns.find((x) => x.name === columnName);\n    const colType = column === null || column === void 0 ? void 0 : column.type;\n    const value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n        return convertCell(colType, value);\n    }\n    return noop(value);\n};\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} stringValue The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\nexport const convertCell = (type, value) => {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n        const dataType = type.slice(1, type.length);\n        return toArray(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n        case PostgresTypes.bool:\n            return toBoolean(value);\n        case PostgresTypes.float4:\n        case PostgresTypes.float8:\n        case PostgresTypes.int2:\n        case PostgresTypes.int4:\n        case PostgresTypes.int8:\n        case PostgresTypes.numeric:\n        case PostgresTypes.oid:\n            return toNumber(value);\n        case PostgresTypes.json:\n        case PostgresTypes.jsonb:\n            return toJson(value);\n        case PostgresTypes.timestamp:\n            return toTimestampString(value); // Format to be consistent with PostgREST\n        case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n        case PostgresTypes.date: // To allow users to cast it based on Timezone\n        case PostgresTypes.daterange:\n        case PostgresTypes.int4range:\n        case PostgresTypes.int8range:\n        case PostgresTypes.money:\n        case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n        case PostgresTypes.text:\n        case PostgresTypes.time: // To allow users to cast it based on Timezone\n        case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n        case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n        case PostgresTypes.tsrange:\n        case PostgresTypes.tstzrange:\n            return noop(value);\n        default:\n            // Return the value for remaining types\n            return noop(value);\n    }\n};\nconst noop = (value) => {\n    return value;\n};\nexport const toBoolean = (value) => {\n    switch (value) {\n        case 't':\n            return true;\n        case 'f':\n            return false;\n        default:\n            return value;\n    }\n};\nexport const toNumber = (value) => {\n    if (typeof value === 'string') {\n        const parsedValue = parseFloat(value);\n        if (!Number.isNaN(parsedValue)) {\n            return parsedValue;\n        }\n    }\n    return value;\n};\nexport const toJson = (value) => {\n    if (typeof value === 'string') {\n        try {\n            return JSON.parse(value);\n        }\n        catch (error) {\n            console.log(`JSON parse error: ${error}`);\n            return value;\n        }\n    }\n    return value;\n};\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\nexport const toArray = (value, type) => {\n    if (typeof value !== 'string') {\n        return value;\n    }\n    const lastIdx = value.length - 1;\n    const closeBrace = value[lastIdx];\n    const openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n        let arr;\n        const valTrim = value.slice(1, lastIdx);\n        // TODO: find a better solution to separate Postgres array data\n        try {\n            arr = JSON.parse('[' + valTrim + ']');\n        }\n        catch (_) {\n            // WARNING: splitting on comma does not cover all edge cases\n            arr = valTrim ? valTrim.split(',') : [];\n        }\n        return arr.map((val) => convertCell(type, val));\n    }\n    return value;\n};\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\nexport const toTimestampString = (value) => {\n    if (typeof value === 'string') {\n        return value.replace(' ', 'T');\n    }\n    return value;\n};\n//# sourceMappingURL=transformers.js.map"]},"metadata":{},"sourceType":"module"}