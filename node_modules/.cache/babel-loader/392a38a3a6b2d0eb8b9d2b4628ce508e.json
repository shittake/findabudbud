{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport crossFetch from 'cross-fetch';\nexport var PostgrestBuilder = /*#__PURE__*/function () {\n  function PostgrestBuilder(builder) {\n    _classCallCheck(this, PostgrestBuilder);\n\n    Object.assign(this, builder);\n\n    var _fetch;\n\n    if (builder.fetch) {\n      _fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      _fetch = crossFetch;\n    } else {\n      _fetch = fetch;\n    }\n\n    this.fetch = function () {\n      return _fetch.apply(void 0, arguments);\n    };\n\n    this.shouldThrowOnError = builder.shouldThrowOnError || false;\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n\n\n  _createClass(PostgrestBuilder, [{\n    key: \"throwOnError\",\n    value: function throwOnError(_throwOnError) {\n      if (_throwOnError === null || _throwOnError === undefined) {\n        _throwOnError = true;\n      }\n\n      this.shouldThrowOnError = _throwOnError;\n      return this;\n    }\n  }, {\n    key: \"then\",\n    value: function then(onfulfilled, onrejected) {\n      var _this = this;\n\n      // https://postgrest.org/en/stable/api.html#switching-schemas\n      if (typeof this.schema === 'undefined') {// skip\n      } else if (['GET', 'HEAD'].includes(this.method)) {\n        this.headers['Accept-Profile'] = this.schema;\n      } else {\n        this.headers['Content-Profile'] = this.schema;\n      }\n\n      if (this.method !== 'GET' && this.method !== 'HEAD') {\n        this.headers['Content-Type'] = 'application/json';\n      }\n\n      var res = this.fetch(this.url.toString(), {\n        method: this.method,\n        headers: this.headers,\n        body: JSON.stringify(this.body),\n        signal: this.signal\n      }).then(function (res) {\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _a, _b, _c, error, data, count, isReturnMinimal, text, countHeader, contentRange, body, postgrestResponse;\n\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  error = null;\n                  data = null;\n                  count = null;\n\n                  if (!res.ok) {\n                    _context.next = 15;\n                    break;\n                  }\n\n                  isReturnMinimal = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.split(',').includes('return=minimal');\n\n                  if (!(this.method !== 'HEAD' && !isReturnMinimal)) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  _context.next = 8;\n                  return res.text();\n\n                case 8:\n                  text = _context.sent;\n\n                  if (!text) {// discard `text`\n                  } else if (this.headers['Accept'] === 'text/csv') {\n                    data = text;\n                  } else {\n                    data = JSON.parse(text);\n                  }\n\n                case 10:\n                  countHeader = (_b = this.headers['Prefer']) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);\n                  contentRange = (_c = res.headers.get('content-range')) === null || _c === void 0 ? void 0 : _c.split('/');\n\n                  if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                  }\n\n                  _context.next = 21;\n                  break;\n\n                case 15:\n                  _context.next = 17;\n                  return res.text();\n\n                case 17:\n                  body = _context.sent;\n\n                  try {\n                    error = JSON.parse(body);\n                  } catch (_d) {\n                    error = {\n                      message: body\n                    };\n                  }\n\n                  if (!(error && this.shouldThrowOnError)) {\n                    _context.next = 21;\n                    break;\n                  }\n\n                  throw error;\n\n                case 21:\n                  postgrestResponse = {\n                    error: error,\n                    data: data,\n                    count: count,\n                    status: res.status,\n                    statusText: res.statusText,\n                    body: data\n                  };\n                  return _context.abrupt(\"return\", postgrestResponse);\n\n                case 23:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      });\n\n      if (!this.shouldThrowOnError) {\n        res = res.catch(function (fetchError) {\n          return {\n            error: {\n              message: \"FetchError: \".concat(fetchError.message),\n              details: '',\n              hint: '',\n              code: fetchError.code || ''\n            },\n            data: null,\n            body: null,\n            count: null,\n            status: 400,\n            statusText: 'Bad Request'\n          };\n        });\n      }\n\n      return res.then(onfulfilled, onrejected);\n    }\n  }]);\n\n  return PostgrestBuilder;\n}();","map":{"version":3,"mappings":"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","names":["crossFetch","PostgrestBuilder","builder","Object","assign","_fetch","fetch","shouldThrowOnError","throwOnError","undefined","onfulfilled","onrejected","schema","includes","method","headers","res","url","toString","body","JSON","stringify","signal","then","__awaiter","error","data","count","ok","isReturnMinimal","_a","split","text","parse","countHeader","_b","match","contentRange","get","_c","length","parseInt","message","postgrestResponse","status","statusText","catch","fetchError","details","hint","code"],"sourceRoot":"","sources":["../../../src/lib/types.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}