{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport crossFetch from 'cross-fetch';\nexport var PostgrestBuilder = /*#__PURE__*/function () {\n  function PostgrestBuilder(builder) {\n    _classCallCheck(this, PostgrestBuilder);\n\n    Object.assign(this, builder);\n\n    var _fetch;\n\n    if (builder.fetch) {\n      _fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      _fetch = crossFetch;\n    } else {\n      _fetch = fetch;\n    }\n\n    this.fetch = function () {\n      return _fetch.apply(void 0, arguments);\n    };\n\n    this.shouldThrowOnError = builder.shouldThrowOnError || false;\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n\n\n  _createClass(PostgrestBuilder, [{\n    key: \"throwOnError\",\n    value: function throwOnError(_throwOnError) {\n      if (_throwOnError === null || _throwOnError === undefined) {\n        _throwOnError = true;\n      }\n\n      this.shouldThrowOnError = _throwOnError;\n      return this;\n    }\n  }, {\n    key: \"then\",\n    value: function then(onfulfilled, onrejected) {\n      var _this = this;\n\n      // https://postgrest.org/en/stable/api.html#switching-schemas\n      if (typeof this.schema === 'undefined') {// skip\n      } else if (['GET', 'HEAD'].includes(this.method)) {\n        this.headers['Accept-Profile'] = this.schema;\n      } else {\n        this.headers['Content-Profile'] = this.schema;\n      }\n\n      if (this.method !== 'GET' && this.method !== 'HEAD') {\n        this.headers['Content-Type'] = 'application/json';\n      }\n\n      var res = this.fetch(this.url.toString(), {\n        method: this.method,\n        headers: this.headers,\n        body: JSON.stringify(this.body),\n        signal: this.signal\n      }).then(function (res) {\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _a, _b, _c, error, data, count, isReturnMinimal, text, countHeader, contentRange, body, postgrestResponse;\n\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  error = null;\n                  data = null;\n                  count = null;\n\n                  if (!res.ok) {\n                    _context.next = 15;\n                    break;\n                  }\n\n                  isReturnMinimal = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.split(',').includes('return=minimal');\n\n                  if (!(this.method !== 'HEAD' && !isReturnMinimal)) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  _context.next = 8;\n                  return res.text();\n\n                case 8:\n                  text = _context.sent;\n\n                  if (!text) {// discard `text`\n                  } else if (this.headers['Accept'] === 'text/csv') {\n                    data = text;\n                  } else {\n                    data = JSON.parse(text);\n                  }\n\n                case 10:\n                  countHeader = (_b = this.headers['Prefer']) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);\n                  contentRange = (_c = res.headers.get('content-range')) === null || _c === void 0 ? void 0 : _c.split('/');\n\n                  if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                  }\n\n                  _context.next = 21;\n                  break;\n\n                case 15:\n                  _context.next = 17;\n                  return res.text();\n\n                case 17:\n                  body = _context.sent;\n\n                  try {\n                    error = JSON.parse(body);\n                  } catch (_d) {\n                    error = {\n                      message: body\n                    };\n                  }\n\n                  if (!(error && this.shouldThrowOnError)) {\n                    _context.next = 21;\n                    break;\n                  }\n\n                  throw error;\n\n                case 21:\n                  postgrestResponse = {\n                    error: error,\n                    data: data,\n                    count: count,\n                    status: res.status,\n                    statusText: res.statusText,\n                    body: data\n                  };\n                  return _context.abrupt(\"return\", postgrestResponse);\n\n                case 23:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      });\n\n      if (!this.shouldThrowOnError) {\n        res = res.catch(function (fetchError) {\n          return {\n            error: {\n              message: \"FetchError: \".concat(fetchError.message),\n              details: '',\n              hint: '',\n              code: fetchError.code || ''\n            },\n            data: null,\n            body: null,\n            count: null,\n            status: 400,\n            statusText: 'Bad Request'\n          };\n        });\n      }\n\n      return res.then(onfulfilled, onrejected);\n    }\n  }]);\n\n  return PostgrestBuilder;\n}();","map":{"version":3,"sources":["../../../src/lib/types.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport crossFetch from 'cross-fetch';\nexport class PostgrestBuilder {\n    constructor(builder) {\n        Object.assign(this, builder);\n        let _fetch;\n        if (builder.fetch) {\n            _fetch = builder.fetch;\n        }\n        else if (typeof fetch === 'undefined') {\n            _fetch = crossFetch;\n        }\n        else {\n            _fetch = fetch;\n        }\n        this.fetch = (...args) => _fetch(...args);\n        this.shouldThrowOnError = builder.shouldThrowOnError || false;\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    throwOnError(throwOnError) {\n        if (throwOnError === null || throwOnError === undefined) {\n            throwOnError = true;\n        }\n        this.shouldThrowOnError = throwOnError;\n        return this;\n    }\n    then(onfulfilled, onrejected) {\n        // https://postgrest.org/en/stable/api.html#switching-schemas\n        if (typeof this.schema === 'undefined') {\n            // skip\n        }\n        else if (['GET', 'HEAD'].includes(this.method)) {\n            this.headers['Accept-Profile'] = this.schema;\n        }\n        else {\n            this.headers['Content-Profile'] = this.schema;\n        }\n        if (this.method !== 'GET' && this.method !== 'HEAD') {\n            this.headers['Content-Type'] = 'application/json';\n        }\n        let res = this.fetch(this.url.toString(), {\n            method: this.method,\n            headers: this.headers,\n            body: JSON.stringify(this.body),\n            signal: this.signal,\n        }).then((res) => __awaiter(this, void 0, void 0, function* () {\n            var _a, _b, _c;\n            let error = null;\n            let data = null;\n            let count = null;\n            if (res.ok) {\n                const isReturnMinimal = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.split(',').includes('return=minimal');\n                if (this.method !== 'HEAD' && !isReturnMinimal) {\n                    const text = yield res.text();\n                    if (!text) {\n                        // discard `text`\n                    }\n                    else if (this.headers['Accept'] === 'text/csv') {\n                        data = text;\n                    }\n                    else {\n                        data = JSON.parse(text);\n                    }\n                }\n                const countHeader = (_b = this.headers['Prefer']) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);\n                const contentRange = (_c = res.headers.get('content-range')) === null || _c === void 0 ? void 0 : _c.split('/');\n                if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                }\n            }\n            else {\n                const body = yield res.text();\n                try {\n                    error = JSON.parse(body);\n                }\n                catch (_d) {\n                    error = {\n                        message: body,\n                    };\n                }\n                if (error && this.shouldThrowOnError) {\n                    throw error;\n                }\n            }\n            const postgrestResponse = {\n                error,\n                data,\n                count,\n                status: res.status,\n                statusText: res.statusText,\n                body: data,\n            };\n            return postgrestResponse;\n        }));\n        if (!this.shouldThrowOnError) {\n            res = res.catch((fetchError) => ({\n                error: {\n                    message: `FetchError: ${fetchError.message}`,\n                    details: '',\n                    hint: '',\n                    code: fetchError.code || '',\n                },\n                data: null,\n                body: null,\n                count: null,\n                status: 400,\n                statusText: 'Bad Request',\n            }));\n        }\n        return res.then(onfulfilled, onrejected);\n    }\n}\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"module"}