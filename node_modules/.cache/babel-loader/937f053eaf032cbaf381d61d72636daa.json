{"ast":null,"code":"import _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport PostgrestQueryBuilder from './lib/PostgrestQueryBuilder';\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder';\nimport { DEFAULT_HEADERS } from './lib/constants';\n\nvar PostgrestClient = /*#__PURE__*/function () {\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  function PostgrestClient(url) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch,\n        throwOnError = _ref.throwOnError;\n\n    _classCallCheck(this, PostgrestClient);\n\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schema = schema;\n    this.fetch = fetch;\n    this.shouldThrowOnError = throwOnError;\n  }\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n\n\n  _createClass(PostgrestClient, [{\n    key: \"auth\",\n    value: function auth(token) {\n      this.headers['Authorization'] = \"Bearer \".concat(token);\n      return this;\n    }\n    /**\n     * Perform a table operation.\n     *\n     * @param table  The table name to operate on.\n     */\n\n  }, {\n    key: \"from\",\n    value: function from(table) {\n      var url = \"\".concat(this.url, \"/\").concat(table);\n      return new PostgrestQueryBuilder(url, {\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch,\n        shouldThrowOnError: this.shouldThrowOnError\n      });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param params  The parameters to pass to the function call.\n     * @param head  When set to true, no data will be returned.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n\n  }, {\n    key: \"rpc\",\n    value: function rpc(fn, params) {\n      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === void 0 ? false : _ref2$head,\n          _ref2$count = _ref2.count,\n          count = _ref2$count === void 0 ? null : _ref2$count;\n\n      var url = \"\".concat(this.url, \"/rpc/\").concat(fn);\n      return new PostgrestRpcBuilder(url, {\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch,\n        shouldThrowOnError: this.shouldThrowOnError\n      }).rpc(params, {\n        head: head,\n        count: count\n      });\n    }\n  }]);\n\n  return PostgrestClient;\n}();\n\nexport { PostgrestClient as default };","map":{"version":3,"sources":["../../src/PostgrestClient.ts"],"names":[],"mappings":";;AAAA,OAAO,qBAAP,MAAkC,6BAAlC;AACA,OAAO,mBAAP,MAAgC,2BAAhC;AAEA,SAAS,eAAT,QAAgC,iBAAhC;;IAGqB,e;EAOnB;;;;;;AAMG;EACH,yBACE,GADF,EAYQ;IAAA,+EAAF,EAAE;IAAA,wBATJ,OASI;IAAA,IATJ,OASI,6BATM,EASN;IAAA,IARJ,MAQI,QARJ,MAQI;IAAA,IAPJ,KAOI,QAPJ,KAOI;IAAA,IANJ,YAMI,QANJ,YAMI;;IAAA;;IAEN,KAAK,GAAL,GAAW,GAAX;IACA,KAAK,OAAL,GAAY,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,eAAR,CAAA,EAA4B,OAA5B,CAAZ;IACA,KAAK,MAAL,GAAc,MAAd;IACA,KAAK,KAAL,GAAa,KAAb;IACA,KAAK,kBAAL,GAA0B,YAA1B;EACD;EAED;;;;AAIG;;;;;WACH,cAAK,KAAL,EAAkB;MAChB,KAAK,OAAL,CAAa,eAAb,qBAA0C,KAA1C;MACA,OAAO,IAAP;IACD;IAED;;;;AAIG;;;;WACH,cAAc,KAAd,EAA2B;MACzB,IAAM,GAAG,aAAM,KAAK,GAAX,cAAkB,KAAlB,CAAT;MACA,OAAO,IAAI,qBAAJ,CAA6B,GAA7B,EAAkC;QACvC,OAAO,EAAE,KAAK,OADyB;QAEvC,MAAM,EAAE,KAAK,MAF0B;QAGvC,KAAK,EAAE,KAAK,KAH2B;QAIvC,kBAAkB,EAAE,KAAK;MAJc,CAAlC,CAAP;IAMD;IAED;;;;;;;AAOG;;;;WACH,aACE,EADF,EAEE,MAFF,EASQ;MAAA,gFAAF,EAAE;MAAA,uBALJ,IAKI;MAAA,IALJ,IAKI,2BALG,KAKH;MAAA,wBAJJ,KAII;MAAA,IAJJ,KAII,4BAJI,IAIJ;;MAEN,IAAM,GAAG,aAAM,KAAK,GAAX,kBAAsB,EAAtB,CAAT;MACA,OAAO,IAAI,mBAAJ,CAA2B,GAA3B,EAAgC;QACrC,OAAO,EAAE,KAAK,OADuB;QAErC,MAAM,EAAE,KAAK,MAFwB;QAGrC,KAAK,EAAE,KAAK,KAHyB;QAIrC,kBAAkB,EAAE,KAAK;MAJY,CAAhC,EAKJ,GALI,CAKA,MALA,EAKQ;QAAE,IAAI,EAAJ,IAAF;QAAQ,KAAK,EAAL;MAAR,CALR,CAAP;IAMD;;;;;;SAtFkB,e","sourceRoot":"","sourcesContent":["import PostgrestQueryBuilder from './lib/PostgrestQueryBuilder';\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder';\nimport { DEFAULT_HEADERS } from './lib/constants';\nexport default class PostgrestClient {\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url  URL of the PostgREST endpoint.\n     * @param headers  Custom headers.\n     * @param schema  Postgres schema to switch to.\n     */\n    constructor(url, { headers = {}, schema, fetch, throwOnError, } = {}) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n        this.schema = schema;\n        this.fetch = fetch;\n        this.shouldThrowOnError = throwOnError;\n    }\n    /**\n     * Authenticates the request with JWT.\n     *\n     * @param token  The JWT token to use.\n     */\n    auth(token) {\n        this.headers['Authorization'] = `Bearer ${token}`;\n        return this;\n    }\n    /**\n     * Perform a table operation.\n     *\n     * @param table  The table name to operate on.\n     */\n    from(table) {\n        const url = `${this.url}/${table}`;\n        return new PostgrestQueryBuilder(url, {\n            headers: this.headers,\n            schema: this.schema,\n            fetch: this.fetch,\n            shouldThrowOnError: this.shouldThrowOnError,\n        });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param params  The parameters to pass to the function call.\n     * @param head  When set to true, no data will be returned.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    rpc(fn, params, { head = false, count = null, } = {}) {\n        const url = `${this.url}/rpc/${fn}`;\n        return new PostgrestRpcBuilder(url, {\n            headers: this.headers,\n            schema: this.schema,\n            fetch: this.fetch,\n            shouldThrowOnError: this.shouldThrowOnError,\n        }).rpc(params, { head, count });\n    }\n}\n//# sourceMappingURL=PostgrestClient.js.map"]},"metadata":{},"sourceType":"module"}