{"ast":null,"code":"import _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { PostgrestQueryBuilder } from '@supabase/postgrest-js';\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient';\nexport var SupabaseQueryBuilder = /*#__PURE__*/function (_PostgrestQueryBuilde) {\n  _inherits(SupabaseQueryBuilder, _PostgrestQueryBuilde);\n\n  var _super = _createSuper(SupabaseQueryBuilder);\n\n  function SupabaseQueryBuilder(url, _ref) {\n    var _this;\n\n    var _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        realtime = _ref.realtime,\n        table = _ref.table,\n        fetch = _ref.fetch,\n        shouldThrowOnError = _ref.shouldThrowOnError;\n\n    _classCallCheck(this, SupabaseQueryBuilder);\n\n    _this = _super.call(this, url, {\n      headers: headers,\n      schema: schema,\n      fetch: fetch,\n      shouldThrowOnError: shouldThrowOnError\n    });\n    _this._subscription = null;\n    _this._realtime = realtime;\n    _this._headers = headers;\n    _this._schema = schema;\n    _this._table = table;\n    return _this;\n  }\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n\n\n  _createClass(SupabaseQueryBuilder, [{\n    key: \"on\",\n    value: function on(event, callback) {\n      if (!this._realtime.isConnected()) {\n        this._realtime.connect();\n      }\n\n      if (!this._subscription) {\n        this._subscription = new SupabaseRealtimeClient(this._realtime, this._headers, this._schema, this._table);\n      }\n\n      return this._subscription.on(event, callback);\n    }\n  }]);\n\n  return SupabaseQueryBuilder;\n}(PostgrestQueryBuilder);","map":{"version":3,"sources":["../../../src/lib/SupabaseQueryBuilder.ts"],"names":[],"mappings":";;;;AAAA,SAAS,qBAAT,QAAsC,wBAAtC;AACA,SAAS,sBAAT,QAAuC,0BAAvC;AAIA,WAAa,oBAAb;EAAA;;EAAA;;EAOE,8BACE,GADF,QAgBG;IAAA;;IAAA,wBAbC,OAaD;IAAA,IAbC,OAaD,6BAbW,EAaX;IAAA,IAZC,MAYD,QAZC,MAYD;IAAA,IAXC,QAWD,QAXC,QAWD;IAAA,IAVC,KAUD,QAVC,KAUD;IAAA,IATC,KASD,QATC,KASD;IAAA,IARC,kBAQD,QARC,kBAQD;;IAAA;;IAED,0BAAM,GAAN,EAAW;MAAE,OAAO,EAAP,OAAF;MAAW,MAAM,EAAN,MAAX;MAAmB,KAAK,EAAL,KAAnB;MAA0B,kBAAkB,EAAlB;IAA1B,CAAX;IAxBM,MAAA,aAAA,GAA+C,IAA/C;IA0BN,MAAK,SAAL,GAAiB,QAAjB;IACA,MAAK,QAAL,GAAgB,OAAhB;IACA,MAAK,OAAL,GAAe,MAAf;IACA,MAAK,MAAL,GAAc,KAAd;IAPC;EAQF;EAED;;;;AAIG;;;EArCL;IAAA;IAAA,OAsCE,YACE,KADF,EAEE,QAFF,EAEyD;MAEvD,IAAI,CAAC,KAAK,SAAL,CAAe,WAAf,EAAL,EAAmC;QACjC,KAAK,SAAL,CAAe,OAAf;MACD;;MACD,IAAI,CAAC,KAAK,aAAV,EAAyB;QACvB,KAAK,aAAL,GAAqB,IAAI,sBAAJ,CACnB,KAAK,SADc,EAEnB,KAAK,QAFc,EAGnB,KAAK,OAHc,EAInB,KAAK,MAJc,CAArB;MAMD;;MACD,OAAO,KAAK,aAAL,CAAmB,EAAnB,CAAsB,KAAtB,EAA6B,QAA7B,CAAP;IACD;EAtDH;;EAAA;AAAA,EAA6C,qBAA7C","sourceRoot":"","sourcesContent":["import { PostgrestQueryBuilder } from '@supabase/postgrest-js';\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient';\nexport class SupabaseQueryBuilder extends PostgrestQueryBuilder {\n    constructor(url, { headers = {}, schema, realtime, table, fetch, shouldThrowOnError, }) {\n        super(url, { headers, schema, fetch, shouldThrowOnError });\n        this._subscription = null;\n        this._realtime = realtime;\n        this._headers = headers;\n        this._schema = schema;\n        this._table = table;\n    }\n    /**\n     * Subscribe to realtime changes in your database.\n     * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n     * @param callback A callback that will handle the payload that is sent whenever your database changes.\n     */\n    on(event, callback) {\n        if (!this._realtime.isConnected()) {\n            this._realtime.connect();\n        }\n        if (!this._subscription) {\n            this._subscription = new SupabaseRealtimeClient(this._realtime, this._headers, this._schema, this._table);\n        }\n        return this._subscription.on(event, callback);\n    }\n}\n//# sourceMappingURL=SupabaseQueryBuilder.js.map"]},"metadata":{},"sourceType":"module"}