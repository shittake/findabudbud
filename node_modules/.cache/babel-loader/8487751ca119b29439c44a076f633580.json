{"ast":null,"code":"import _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nvar Timer = /*#__PURE__*/function () {\n  function Timer(callback, timerCalc) {\n    _classCallCheck(this, Timer);\n\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n    this.timer = undefined;\n    this.tries = 0;\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n  }\n\n  _createClass(Timer, [{\n    key: \"reset\",\n    value: function reset() {\n      this.tries = 0;\n      clearTimeout(this.timer);\n    } // Cancels any previous scheduleTimeout and schedules callback\n\n  }, {\n    key: \"scheduleTimeout\",\n    value: function scheduleTimeout() {\n      var _this = this;\n\n      clearTimeout(this.timer);\n      this.timer = setTimeout(function () {\n        _this.tries = _this.tries + 1;\n\n        _this.callback();\n      }, this.timerCalc(this.tries + 1));\n    }\n  }]);\n\n  return Timer;\n}();\n\nexport { Timer as default };","map":{"version":3,"sources":["../../../src/lib/timer.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;AAWG;IACkB,K;EAInB,eAAmB,QAAnB,EAA8C,SAA9C,EAAiE;IAAA;;IAA9C,KAAA,QAAA,GAAA,QAAA;IAA2B,KAAA,SAAA,GAAA,SAAA;IAH9C,KAAA,KAAA,GAA4B,SAA5B;IACA,KAAA,KAAA,GAAgB,CAAhB;IAGE,KAAK,QAAL,GAAgB,QAAhB;IACA,KAAK,SAAL,GAAiB,SAAjB;EACD;;;;WAED,iBAAK;MACH,KAAK,KAAL,GAAa,CAAb;MACA,YAAY,CAAC,KAAK,KAAN,CAAZ;IACD,C,CAED;;;;WACA,2BAAe;MAAA;;MACb,YAAY,CAAC,KAAK,KAAN,CAAZ;MAEA,KAAK,KAAL,GAAkB,UAAU,CAAC,YAAK;QAChC,KAAI,CAAC,KAAL,GAAa,KAAI,CAAC,KAAL,GAAa,CAA1B;;QACA,KAAI,CAAC,QAAL;MACD,CAH2B,EAGzB,KAAK,SAAL,CAAe,KAAK,KAAL,GAAa,CAA5B,CAHyB,CAA5B;IAID;;;;;;SAtBkB,K","sourceRoot":"","sourcesContent":["/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n    constructor(callback, timerCalc) {\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n        this.timer = undefined;\n        this.tries = 0;\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n    }\n    reset() {\n        this.tries = 0;\n        clearTimeout(this.timer);\n    }\n    // Cancels any previous scheduleTimeout and schedules callback\n    scheduleTimeout() {\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() => {\n            this.tries = this.tries + 1;\n            this.callback();\n        }, this.timerCalc(this.tries + 1));\n    }\n}\n//# sourceMappingURL=timer.js.map"]},"metadata":{},"sourceType":"module"}