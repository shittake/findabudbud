{"ast":null,"code":"import _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport PostgrestTransformBuilder from './PostgrestTransformBuilder';\n\nvar PostgrestFilterBuilder = /*#__PURE__*/function (_PostgrestTransformBu) {\n  _inherits(PostgrestFilterBuilder, _PostgrestTransformBu);\n\n  var _super = _createSuper(PostgrestFilterBuilder);\n\n  function PostgrestFilterBuilder() {\n    var _this;\n\n    _classCallCheck(this, PostgrestFilterBuilder);\n\n    _this = _super.apply(this, arguments);\n    /** @deprecated Use `contains()` instead. */\n\n    _this.cs = _this.contains;\n    /** @deprecated Use `containedBy()` instead. */\n\n    _this.cd = _this.containedBy;\n    /** @deprecated Use `rangeLt()` instead. */\n\n    _this.sl = _this.rangeLt;\n    /** @deprecated Use `rangeGt()` instead. */\n\n    _this.sr = _this.rangeGt;\n    /** @deprecated Use `rangeGte()` instead. */\n\n    _this.nxl = _this.rangeGte;\n    /** @deprecated Use `rangeLte()` instead. */\n\n    _this.nxr = _this.rangeLte;\n    /** @deprecated Use `rangeAdjacent()` instead. */\n\n    _this.adj = _this.rangeAdjacent;\n    /** @deprecated Use `overlaps()` instead. */\n\n    _this.ov = _this.overlaps;\n    return _this;\n  }\n  /**\n   * Finds all rows which doesn't satisfy the filter.\n   *\n   * @param column  The column to filter on.\n   * @param operator  The operator to filter with.\n   * @param value  The value to filter with.\n   */\n\n\n  _createClass(PostgrestFilterBuilder, [{\n    key: \"not\",\n    value: function not(column, operator, value) {\n      this.url.searchParams.append(\"\".concat(column), \"not.\".concat(operator, \".\").concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows satisfying at least one of the filters.\n     *\n     * @param filters  The filters to use, separated by commas.\n     * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n     */\n\n  }, {\n    key: \"or\",\n    value: function or(filters) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          foreignTable = _ref.foreignTable;\n\n      var key = typeof foreignTable === 'undefined' ? 'or' : \"\".concat(foreignTable, \".or\");\n      this.url.searchParams.append(key, \"(\".concat(filters, \")\"));\n      return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` exactly matches the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(column, value) {\n      this.url.searchParams.append(\"\".concat(column), \"eq.\".concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` doesn't match the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"neq\",\n    value: function neq(column, value) {\n      this.url.searchParams.append(\"\".concat(column), \"neq.\".concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is greater than the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"gt\",\n    value: function gt(column, value) {\n      this.url.searchParams.append(\"\".concat(column), \"gt.\".concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is greater than or\n     * equal to the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"gte\",\n    value: function gte(column, value) {\n      this.url.searchParams.append(\"\".concat(column), \"gte.\".concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is less than the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"lt\",\n    value: function lt(column, value) {\n      this.url.searchParams.append(\"\".concat(column), \"lt.\".concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is less than or equal\n     * to the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"lte\",\n    value: function lte(column, value) {\n      this.url.searchParams.append(\"\".concat(column), \"lte.\".concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose value in the stated `column` matches the supplied\n     * `pattern` (case sensitive).\n     *\n     * @param column  The column to filter on.\n     * @param pattern  The pattern to filter with.\n     */\n\n  }, {\n    key: \"like\",\n    value: function like(column, pattern) {\n      this.url.searchParams.append(\"\".concat(column), \"like.\".concat(pattern));\n      return this;\n    }\n    /**\n     * Finds all rows whose value in the stated `column` matches the supplied\n     * `pattern` (case insensitive).\n     *\n     * @param column  The column to filter on.\n     * @param pattern  The pattern to filter with.\n     */\n\n  }, {\n    key: \"ilike\",\n    value: function ilike(column, pattern) {\n      this.url.searchParams.append(\"\".concat(column), \"ilike.\".concat(pattern));\n      return this;\n    }\n    /**\n     * A check for exact equality (null, true, false), finds all rows whose\n     * value on the stated `column` exactly match the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"is\",\n    value: function is(column, value) {\n      this.url.searchParams.append(\"\".concat(column), \"is.\".concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is found on the\n     * specified `values`.\n     *\n     * @param column  The column to filter on.\n     * @param values  The values to filter with.\n     */\n\n  }, {\n    key: \"in\",\n    value: function _in(column, values) {\n      var cleanedValues = values.map(function (s) {\n        // handle postgrest reserved characters\n        // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n        if (typeof s === 'string' && new RegExp('[,()]').test(s)) return \"\\\"\".concat(s, \"\\\"\");else return \"\".concat(s);\n      }).join(',');\n      this.url.searchParams.append(\"\".concat(column), \"in.(\".concat(cleanedValues, \")\"));\n      return this;\n    }\n    /**\n     * Finds all rows whose json, array, or range value on the stated `column`\n     * contains the values specified in `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"contains\",\n    value: function contains(column, value) {\n      if (typeof value === 'string') {\n        // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n        // keep it simple and accept a string\n        this.url.searchParams.append(\"\".concat(column), \"cs.\".concat(value));\n      } else if (Array.isArray(value)) {\n        // array\n        this.url.searchParams.append(\"\".concat(column), \"cs.{\".concat(value.join(','), \"}\"));\n      } else {\n        // json\n        this.url.searchParams.append(\"\".concat(column), \"cs.\".concat(JSON.stringify(value)));\n      }\n\n      return this;\n    }\n    /**\n     * Finds all rows whose json, array, or range value on the stated `column` is\n     * contained by the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"containedBy\",\n    value: function containedBy(column, value) {\n      if (typeof value === 'string') {\n        // range\n        this.url.searchParams.append(\"\".concat(column), \"cd.\".concat(value));\n      } else if (Array.isArray(value)) {\n        // array\n        this.url.searchParams.append(\"\".concat(column), \"cd.{\".concat(value.join(','), \"}\"));\n      } else {\n        // json\n        this.url.searchParams.append(\"\".concat(column), \"cd.\".concat(JSON.stringify(value)));\n      }\n\n      return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` is strictly to the\n     * left of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n\n  }, {\n    key: \"rangeLt\",\n    value: function rangeLt(column, range) {\n      this.url.searchParams.append(\"\".concat(column), \"sl.\".concat(range));\n      return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` is strictly to\n     * the right of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n\n  }, {\n    key: \"rangeGt\",\n    value: function rangeGt(column, range) {\n      this.url.searchParams.append(\"\".concat(column), \"sr.\".concat(range));\n      return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` does not extend\n     * to the left of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n\n  }, {\n    key: \"rangeGte\",\n    value: function rangeGte(column, range) {\n      this.url.searchParams.append(\"\".concat(column), \"nxl.\".concat(range));\n      return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` does not extend\n     * to the right of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n\n  }, {\n    key: \"rangeLte\",\n    value: function rangeLte(column, range) {\n      this.url.searchParams.append(\"\".concat(column), \"nxr.\".concat(range));\n      return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` is adjacent to\n     * the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n\n  }, {\n    key: \"rangeAdjacent\",\n    value: function rangeAdjacent(column, range) {\n      this.url.searchParams.append(\"\".concat(column), \"adj.\".concat(range));\n      return this;\n    }\n    /**\n     * Finds all rows whose array or range value on the stated `column` overlaps\n     * (has a value in common) with the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"overlaps\",\n    value: function overlaps(column, value) {\n      if (typeof value === 'string') {\n        // range\n        this.url.searchParams.append(\"\".concat(column), \"ov.\".concat(value));\n      } else {\n        // array\n        this.url.searchParams.append(\"\".concat(column), \"ov.{\".concat(value.join(','), \"}\"));\n      }\n\n      return this;\n    }\n    /**\n     * Finds all rows whose text or tsvector value on the stated `column` matches\n     * the tsquery in `query`.\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     * @param type  The type of tsquery conversion to use on `query`.\n     */\n\n  }, {\n    key: \"textSearch\",\n    value: function textSearch(column, query) {\n      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          config = _ref2.config,\n          _ref2$type = _ref2.type,\n          type = _ref2$type === void 0 ? null : _ref2$type;\n\n      var typePart = '';\n\n      if (type === 'plain') {\n        typePart = 'pl';\n      } else if (type === 'phrase') {\n        typePart = 'ph';\n      } else if (type === 'websearch') {\n        typePart = 'w';\n      }\n\n      var configPart = config === undefined ? '' : \"(\".concat(config, \")\");\n      this.url.searchParams.append(\"\".concat(column), \"\".concat(typePart, \"fts\").concat(configPart, \".\").concat(query));\n      return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * to_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` instead.\n     */\n\n  }, {\n    key: \"fts\",\n    value: function fts(column, query) {\n      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          config = _ref3.config;\n\n      var configPart = typeof config === 'undefined' ? '' : \"(\".concat(config, \")\");\n      this.url.searchParams.append(\"\".concat(column), \"fts\".concat(configPart, \".\").concat(query));\n      return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * plainto_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` with `type: 'plain'` instead.\n     */\n\n  }, {\n    key: \"plfts\",\n    value: function plfts(column, query) {\n      var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          config = _ref4.config;\n\n      var configPart = typeof config === 'undefined' ? '' : \"(\".concat(config, \")\");\n      this.url.searchParams.append(\"\".concat(column), \"plfts\".concat(configPart, \".\").concat(query));\n      return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * phraseto_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` with `type: 'phrase'` instead.\n     */\n\n  }, {\n    key: \"phfts\",\n    value: function phfts(column, query) {\n      var _ref5 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          config = _ref5.config;\n\n      var configPart = typeof config === 'undefined' ? '' : \"(\".concat(config, \")\");\n      this.url.searchParams.append(\"\".concat(column), \"phfts\".concat(configPart, \".\").concat(query));\n      return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * websearch_to_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` with `type: 'websearch'` instead.\n     */\n\n  }, {\n    key: \"wfts\",\n    value: function wfts(column, query) {\n      var _ref6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          config = _ref6.config;\n\n      var configPart = typeof config === 'undefined' ? '' : \"(\".concat(config, \")\");\n      this.url.searchParams.append(\"\".concat(column), \"wfts\".concat(configPart, \".\").concat(query));\n      return this;\n    }\n    /**\n     * Finds all rows whose `column` satisfies the filter.\n     *\n     * @param column  The column to filter on.\n     * @param operator  The operator to filter with.\n     * @param value  The value to filter with.\n     */\n\n  }, {\n    key: \"filter\",\n    value: function filter(column, operator, value) {\n      this.url.searchParams.append(\"\".concat(column), \"\".concat(operator, \".\").concat(value));\n      return this;\n    }\n    /**\n     * Finds all rows whose columns match the specified `query` object.\n     *\n     * @param query  The object to filter with, with column names as keys mapped\n     *               to their filter values.\n     */\n\n  }, {\n    key: \"match\",\n    value: function match(query) {\n      var _this2 = this;\n\n      Object.keys(query).forEach(function (key) {\n        _this2.url.searchParams.append(\"\".concat(key), \"eq.\".concat(query[key]));\n      });\n      return this;\n    }\n  }]);\n\n  return PostgrestFilterBuilder;\n}(PostgrestTransformBuilder);\n\nexport { PostgrestFilterBuilder as default };","map":{"version":3,"sources":["../../../src/lib/PostgrestFilterBuilder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PostgrestTransformBuilder from './PostgrestTransformBuilder';\nexport default class PostgrestFilterBuilder extends PostgrestTransformBuilder {\n    constructor() {\n        super(...arguments);\n        /** @deprecated Use `contains()` instead. */\n        this.cs = this.contains;\n        /** @deprecated Use `containedBy()` instead. */\n        this.cd = this.containedBy;\n        /** @deprecated Use `rangeLt()` instead. */\n        this.sl = this.rangeLt;\n        /** @deprecated Use `rangeGt()` instead. */\n        this.sr = this.rangeGt;\n        /** @deprecated Use `rangeGte()` instead. */\n        this.nxl = this.rangeGte;\n        /** @deprecated Use `rangeLte()` instead. */\n        this.nxr = this.rangeLte;\n        /** @deprecated Use `rangeAdjacent()` instead. */\n        this.adj = this.rangeAdjacent;\n        /** @deprecated Use `overlaps()` instead. */\n        this.ov = this.overlaps;\n    }\n    /**\n     * Finds all rows which doesn't satisfy the filter.\n     *\n     * @param column  The column to filter on.\n     * @param operator  The operator to filter with.\n     * @param value  The value to filter with.\n     */\n    not(column, operator, value) {\n        this.url.searchParams.append(`${column}`, `not.${operator}.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows satisfying at least one of the filters.\n     *\n     * @param filters  The filters to use, separated by commas.\n     * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n     */\n    or(filters, { foreignTable } = {}) {\n        const key = typeof foreignTable === 'undefined' ? 'or' : `${foreignTable}.or`;\n        this.url.searchParams.append(key, `(${filters})`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` exactly matches the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    eq(column, value) {\n        this.url.searchParams.append(`${column}`, `eq.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` doesn't match the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    neq(column, value) {\n        this.url.searchParams.append(`${column}`, `neq.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is greater than the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    gt(column, value) {\n        this.url.searchParams.append(`${column}`, `gt.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is greater than or\n     * equal to the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    gte(column, value) {\n        this.url.searchParams.append(`${column}`, `gte.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is less than the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    lt(column, value) {\n        this.url.searchParams.append(`${column}`, `lt.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is less than or equal\n     * to the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    lte(column, value) {\n        this.url.searchParams.append(`${column}`, `lte.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value in the stated `column` matches the supplied\n     * `pattern` (case sensitive).\n     *\n     * @param column  The column to filter on.\n     * @param pattern  The pattern to filter with.\n     */\n    like(column, pattern) {\n        this.url.searchParams.append(`${column}`, `like.${pattern}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value in the stated `column` matches the supplied\n     * `pattern` (case insensitive).\n     *\n     * @param column  The column to filter on.\n     * @param pattern  The pattern to filter with.\n     */\n    ilike(column, pattern) {\n        this.url.searchParams.append(`${column}`, `ilike.${pattern}`);\n        return this;\n    }\n    /**\n     * A check for exact equality (null, true, false), finds all rows whose\n     * value on the stated `column` exactly match the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    is(column, value) {\n        this.url.searchParams.append(`${column}`, `is.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is found on the\n     * specified `values`.\n     *\n     * @param column  The column to filter on.\n     * @param values  The values to filter with.\n     */\n    in(column, values) {\n        const cleanedValues = values\n            .map((s) => {\n            // handle postgrest reserved characters\n            // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n            if (typeof s === 'string' && new RegExp('[,()]').test(s))\n                return `\"${s}\"`;\n            else\n                return `${s}`;\n        })\n            .join(',');\n        this.url.searchParams.append(`${column}`, `in.(${cleanedValues})`);\n        return this;\n    }\n    /**\n     * Finds all rows whose json, array, or range value on the stated `column`\n     * contains the values specified in `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    contains(column, value) {\n        if (typeof value === 'string') {\n            // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n            // keep it simple and accept a string\n            this.url.searchParams.append(`${column}`, `cs.${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // array\n            this.url.searchParams.append(`${column}`, `cs.{${value.join(',')}}`);\n        }\n        else {\n            // json\n            this.url.searchParams.append(`${column}`, `cs.${JSON.stringify(value)}`);\n        }\n        return this;\n    }\n    /**\n     * Finds all rows whose json, array, or range value on the stated `column` is\n     * contained by the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    containedBy(column, value) {\n        if (typeof value === 'string') {\n            // range\n            this.url.searchParams.append(`${column}`, `cd.${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // array\n            this.url.searchParams.append(`${column}`, `cd.{${value.join(',')}}`);\n        }\n        else {\n            // json\n            this.url.searchParams.append(`${column}`, `cd.${JSON.stringify(value)}`);\n        }\n        return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` is strictly to the\n     * left of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n    rangeLt(column, range) {\n        this.url.searchParams.append(`${column}`, `sl.${range}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` is strictly to\n     * the right of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n    rangeGt(column, range) {\n        this.url.searchParams.append(`${column}`, `sr.${range}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` does not extend\n     * to the left of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n    rangeGte(column, range) {\n        this.url.searchParams.append(`${column}`, `nxl.${range}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` does not extend\n     * to the right of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n    rangeLte(column, range) {\n        this.url.searchParams.append(`${column}`, `nxr.${range}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` is adjacent to\n     * the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n    rangeAdjacent(column, range) {\n        this.url.searchParams.append(`${column}`, `adj.${range}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose array or range value on the stated `column` overlaps\n     * (has a value in common) with the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    overlaps(column, value) {\n        if (typeof value === 'string') {\n            // range\n            this.url.searchParams.append(`${column}`, `ov.${value}`);\n        }\n        else {\n            // array\n            this.url.searchParams.append(`${column}`, `ov.{${value.join(',')}}`);\n        }\n        return this;\n    }\n    /**\n     * Finds all rows whose text or tsvector value on the stated `column` matches\n     * the tsquery in `query`.\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     * @param type  The type of tsquery conversion to use on `query`.\n     */\n    textSearch(column, query, { config, type = null, } = {}) {\n        let typePart = '';\n        if (type === 'plain') {\n            typePart = 'pl';\n        }\n        else if (type === 'phrase') {\n            typePart = 'ph';\n        }\n        else if (type === 'websearch') {\n            typePart = 'w';\n        }\n        const configPart = config === undefined ? '' : `(${config})`;\n        this.url.searchParams.append(`${column}`, `${typePart}fts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * to_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` instead.\n     */\n    fts(column, query, { config } = {}) {\n        const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n        this.url.searchParams.append(`${column}`, `fts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * plainto_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` with `type: 'plain'` instead.\n     */\n    plfts(column, query, { config } = {}) {\n        const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n        this.url.searchParams.append(`${column}`, `plfts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * phraseto_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` with `type: 'phrase'` instead.\n     */\n    phfts(column, query, { config } = {}) {\n        const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n        this.url.searchParams.append(`${column}`, `phfts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * websearch_to_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` with `type: 'websearch'` instead.\n     */\n    wfts(column, query, { config } = {}) {\n        const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n        this.url.searchParams.append(`${column}`, `wfts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose `column` satisfies the filter.\n     *\n     * @param column  The column to filter on.\n     * @param operator  The operator to filter with.\n     * @param value  The value to filter with.\n     */\n    filter(column, operator, value) {\n        this.url.searchParams.append(`${column}`, `${operator}.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose columns match the specified `query` object.\n     *\n     * @param query  The object to filter with, with column names as keys mapped\n     *               to their filter values.\n     */\n    match(query) {\n        Object.keys(query).forEach((key) => {\n            this.url.searchParams.append(`${key}`, `eq.${query[key]}`);\n        });\n        return this;\n    }\n}\n//# sourceMappingURL=PostgrestFilterBuilder.js.map"]},"metadata":{},"sourceType":"module"}