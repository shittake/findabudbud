{"ast":null,"code":"import _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { PostgrestQueryBuilder } from '@supabase/postgrest-js';\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient';\nexport var SupabaseQueryBuilder = /*#__PURE__*/function (_PostgrestQueryBuilde) {\n  _inherits(SupabaseQueryBuilder, _PostgrestQueryBuilde);\n\n  var _super = _createSuper(SupabaseQueryBuilder);\n\n  function SupabaseQueryBuilder(url, _ref) {\n    var _this;\n\n    var _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        realtime = _ref.realtime,\n        table = _ref.table,\n        fetch = _ref.fetch,\n        shouldThrowOnError = _ref.shouldThrowOnError;\n\n    _classCallCheck(this, SupabaseQueryBuilder);\n\n    _this = _super.call(this, url, {\n      headers: headers,\n      schema: schema,\n      fetch: fetch,\n      shouldThrowOnError: shouldThrowOnError\n    });\n    _this._subscription = null;\n    _this._realtime = realtime;\n    _this._headers = headers;\n    _this._schema = schema;\n    _this._table = table;\n    return _this;\n  }\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n\n\n  _createClass(SupabaseQueryBuilder, [{\n    key: \"on\",\n    value: function on(event, callback) {\n      if (!this._realtime.isConnected()) {\n        this._realtime.connect();\n      }\n\n      if (!this._subscription) {\n        this._subscription = new SupabaseRealtimeClient(this._realtime, this._headers, this._schema, this._table);\n      }\n\n      return this._subscription.on(event, callback);\n    }\n  }]);\n\n  return SupabaseQueryBuilder;\n}(PostgrestQueryBuilder);","map":{"version":3,"mappings":";;;;AAAA,SAASA,qBAAT,QAAsC,wBAAtC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAIA,WAAaC,oBAAb;EAAA;;EAAA;;EAOE,8BACEC,GADF,QAgBG;IAAA;;IAAA,wBAbCC,OAaD;IAAA,IAbCA,OAaD,6BAbW,EAaX;IAAA,IAZCC,MAYD,QAZCA,MAYD;IAAA,IAXCC,QAWD,QAXCA,QAWD;IAAA,IAVCC,KAUD,QAVCA,KAUD;IAAA,IATCC,KASD,QATCA,KASD;IAAA,IARCC,kBAQD,QARCA,kBAQD;;IAAA;;IAED,0BAAMN,GAAN,EAAW;MAAEC,OAAO,EAAPA,OAAF;MAAWC,MAAM,EAANA,MAAX;MAAmBG,KAAK,EAALA,KAAnB;MAA0BC,kBAAkB,EAAlBA;IAA1B,CAAX;IAxBM,sBAA+C,IAA/C;IA0BN,MAAKC,SAAL,GAAiBJ,QAAjB;IACA,MAAKK,QAAL,GAAgBP,OAAhB;IACA,MAAKQ,OAAL,GAAeP,MAAf;IACA,MAAKQ,MAAL,GAAcN,KAAd;IAPC;EAQF;EAED;;;;;;;EAjCF;IAAA;IAAA,OAsCE,YACEO,KADF,EAEEC,QAFF,EAEyD;MAEvD,IAAI,CAAC,KAAKL,SAAL,CAAeM,WAAf,EAAL,EAAmC;QACjC,KAAKN,SAAL,CAAeO,OAAf;MACD;;MACD,IAAI,CAAC,KAAKC,aAAV,EAAyB;QACvB,KAAKA,aAAL,GAAqB,IAAIjB,sBAAJ,CACnB,KAAKS,SADc,EAEnB,KAAKC,QAFc,EAGnB,KAAKC,OAHc,EAInB,KAAKC,MAJc,CAArB;MAMD;;MACD,OAAO,KAAKK,aAAL,CAAmBC,EAAnB,CAAsBL,KAAtB,EAA6BC,QAA7B,CAAP;IACD;EAtDH;;EAAA;AAAA,EAA6Cf,qBAA7C","names":["PostgrestQueryBuilder","SupabaseRealtimeClient","SupabaseQueryBuilder","url","headers","schema","realtime","table","fetch","shouldThrowOnError","_realtime","_headers","_schema","_table","event","callback","isConnected","connect","_subscription","on"],"sourceRoot":"","sources":["../../../src/lib/SupabaseQueryBuilder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}