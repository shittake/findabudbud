{"ast":null,"code":"import _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { DEFAULT_TIMEOUT } from '../lib/constants';\nimport RealtimeSubscription from '../RealtimeSubscription';\n\nvar Push = /*#__PURE__*/function () {\n  /**\n   * Initializes the Push\n   *\n   * @param channel The Channel\n   * @param event The event, for example `\"phx_join\"`\n   * @param payload The payload, for example `{user_id: 123}`\n   * @param timeout The push timeout in milliseconds\n   */\n  function Push(channel, event) {\n    var payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_TIMEOUT;\n\n    _classCallCheck(this, Push);\n\n    this.channel = channel;\n    this.event = event;\n    this.payload = payload;\n    this.timeout = timeout;\n    this.sent = false;\n    this.timeoutTimer = undefined;\n    this.ref = '';\n    this.receivedResp = null;\n    this.recHooks = [];\n    this.refEvent = null;\n  }\n\n  _createClass(Push, [{\n    key: \"resend\",\n    value: function resend(timeout) {\n      this.timeout = timeout;\n\n      this._cancelRefEvent();\n\n      this.ref = '';\n      this.refEvent = null;\n      this.receivedResp = null;\n      this.sent = false;\n      this.send();\n    }\n  }, {\n    key: \"send\",\n    value: function send() {\n      if (this._hasReceived('timeout')) {\n        return;\n      }\n\n      this.startTimeout();\n      this.sent = true;\n      this.channel.socket.push({\n        topic: this.channel.topic,\n        event: this.event,\n        payload: this.payload,\n        ref: this.ref\n      });\n    }\n  }, {\n    key: \"updatePayload\",\n    value: function updatePayload(payload) {\n      this.payload = Object.assign(Object.assign({}, this.payload), payload);\n    }\n  }, {\n    key: \"receive\",\n    value: function receive(status, callback) {\n      var _a;\n\n      if (this._hasReceived(status)) {\n        callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);\n      }\n\n      this.recHooks.push({\n        status: status,\n        callback: callback\n      });\n      return this;\n    }\n  }, {\n    key: \"startTimeout\",\n    value: function startTimeout() {\n      var _this = this;\n\n      if (this.timeoutTimer) {\n        return;\n      }\n\n      this.ref = this.channel.socket.makeRef();\n      this.refEvent = this.channel.replyEventName(this.ref);\n\n      var callback = function callback(payload) {\n        _this._cancelRefEvent();\n\n        _this._cancelTimeout();\n\n        _this.receivedResp = payload;\n\n        _this._matchReceive(payload);\n      };\n\n      if (this.channel instanceof RealtimeSubscription) {\n        this.channel.on(this.refEvent, callback);\n      } else {\n        this.channel.on(this.refEvent, {}, callback);\n      }\n\n      this.timeoutTimer = setTimeout(function () {\n        _this.trigger('timeout', {});\n      }, this.timeout);\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(status, response) {\n      if (this.refEvent) this.channel.trigger(this.refEvent, {\n        status: status,\n        response: response\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._cancelRefEvent();\n\n      this._cancelTimeout();\n    }\n  }, {\n    key: \"_cancelRefEvent\",\n    value: function _cancelRefEvent() {\n      if (!this.refEvent) {\n        return;\n      }\n\n      if (this.channel instanceof RealtimeSubscription) {\n        this.channel.off(this.refEvent);\n      } else {\n        this.channel.off(this.refEvent, {});\n      }\n    }\n  }, {\n    key: \"_cancelTimeout\",\n    value: function _cancelTimeout() {\n      clearTimeout(this.timeoutTimer);\n      this.timeoutTimer = undefined;\n    }\n  }, {\n    key: \"_matchReceive\",\n    value: function _matchReceive(_ref) {\n      var status = _ref.status,\n          response = _ref.response;\n      this.recHooks.filter(function (h) {\n        return h.status === status;\n      }).forEach(function (h) {\n        return h.callback(response);\n      });\n    }\n  }, {\n    key: \"_hasReceived\",\n    value: function _hasReceived(status) {\n      return this.receivedResp && this.receivedResp.status === status;\n    }\n  }]);\n\n  return Push;\n}();\n\nexport { Push as default };","map":{"version":3,"sources":["../../../src/lib/push.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { DEFAULT_TIMEOUT } from '../lib/constants';\nimport RealtimeSubscription from '../RealtimeSubscription';\nexport default class Push {\n    /**\n     * Initializes the Push\n     *\n     * @param channel The Channel\n     * @param event The event, for example `\"phx_join\"`\n     * @param payload The payload, for example `{user_id: 123}`\n     * @param timeout The push timeout in milliseconds\n     */\n    constructor(channel, event, payload = {}, timeout = DEFAULT_TIMEOUT) {\n        this.channel = channel;\n        this.event = event;\n        this.payload = payload;\n        this.timeout = timeout;\n        this.sent = false;\n        this.timeoutTimer = undefined;\n        this.ref = '';\n        this.receivedResp = null;\n        this.recHooks = [];\n        this.refEvent = null;\n    }\n    resend(timeout) {\n        this.timeout = timeout;\n        this._cancelRefEvent();\n        this.ref = '';\n        this.refEvent = null;\n        this.receivedResp = null;\n        this.sent = false;\n        this.send();\n    }\n    send() {\n        if (this._hasReceived('timeout')) {\n            return;\n        }\n        this.startTimeout();\n        this.sent = true;\n        this.channel.socket.push({\n            topic: this.channel.topic,\n            event: this.event,\n            payload: this.payload,\n            ref: this.ref,\n        });\n    }\n    updatePayload(payload) {\n        this.payload = Object.assign(Object.assign({}, this.payload), payload);\n    }\n    receive(status, callback) {\n        var _a;\n        if (this._hasReceived(status)) {\n            callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);\n        }\n        this.recHooks.push({ status, callback });\n        return this;\n    }\n    startTimeout() {\n        if (this.timeoutTimer) {\n            return;\n        }\n        this.ref = this.channel.socket.makeRef();\n        this.refEvent = this.channel.replyEventName(this.ref);\n        const callback = (payload) => {\n            this._cancelRefEvent();\n            this._cancelTimeout();\n            this.receivedResp = payload;\n            this._matchReceive(payload);\n        };\n        if (this.channel instanceof RealtimeSubscription) {\n            this.channel.on(this.refEvent, callback);\n        }\n        else {\n            this.channel.on(this.refEvent, {}, callback);\n        }\n        this.timeoutTimer = setTimeout(() => {\n            this.trigger('timeout', {});\n        }, this.timeout);\n    }\n    trigger(status, response) {\n        if (this.refEvent)\n            this.channel.trigger(this.refEvent, { status, response });\n    }\n    destroy() {\n        this._cancelRefEvent();\n        this._cancelTimeout();\n    }\n    _cancelRefEvent() {\n        if (!this.refEvent) {\n            return;\n        }\n        if (this.channel instanceof RealtimeSubscription) {\n            this.channel.off(this.refEvent);\n        }\n        else {\n            this.channel.off(this.refEvent, {});\n        }\n    }\n    _cancelTimeout() {\n        clearTimeout(this.timeoutTimer);\n        this.timeoutTimer = undefined;\n    }\n    _matchReceive({ status, response, }) {\n        this.recHooks\n            .filter((h) => h.status === status)\n            .forEach((h) => h.callback(response));\n    }\n    _hasReceived(status) {\n        return this.receivedResp && this.receivedResp.status === status;\n    }\n}\n//# sourceMappingURL=push.js.map"]},"metadata":{},"sourceType":"module"}