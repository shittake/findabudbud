{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { resolveFetch } from './helper';\nexport var FunctionsClient = /*#__PURE__*/function () {\n  function FunctionsClient(url) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        customFetch = _ref.customFetch;\n\n    _classCallCheck(this, FunctionsClient);\n\n    this.url = url;\n    this.headers = headers;\n    this.fetch = resolveFetch(customFetch);\n  }\n  /**\n   * Updates the authorization header\n   * @params token - the new jwt token sent in the authorisation header\n   */\n\n\n  _createClass(FunctionsClient, [{\n    key: \"setAuth\",\n    value: function setAuth(token) {\n      this.headers.Authorization = \"Bearer \".concat(token);\n    }\n    /**\n     * Invokes a function\n     * @param functionName - the name of the function to invoke\n     * @param invokeOptions - object with the following properties\n     * `headers`: object representing the headers to send with the request\n     * `body`: the body of the request\n     * `responseType`: how the response should be parsed. The default is `json`\n     */\n\n  }, {\n    key: \"invoke\",\n    value: function invoke(functionName, invokeOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _ref2, headers, body, response, isRelayError, data, _ref3, responseType;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _ref2 = invokeOptions !== null && invokeOptions !== void 0 ? invokeOptions : {}, headers = _ref2.headers, body = _ref2.body;\n                _context.next = 4;\n                return this.fetch(\"\".concat(this.url, \"/\").concat(functionName), {\n                  method: 'POST',\n                  headers: Object.assign({}, this.headers, headers),\n                  body: body\n                });\n\n              case 4:\n                response = _context.sent;\n                isRelayError = response.headers.get('x-relay-error');\n\n                if (!(isRelayError && isRelayError === 'true')) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.t0 = Error;\n                _context.next = 10;\n                return response.text();\n\n              case 10:\n                _context.t1 = _context.sent;\n                _context.t2 = new _context.t0(_context.t1);\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: _context.t2\n                });\n\n              case 13:\n                _ref3 = invokeOptions !== null && invokeOptions !== void 0 ? invokeOptions : {}, responseType = _ref3.responseType;\n\n                if (!(!responseType || responseType === 'json')) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _context.next = 17;\n                return response.json();\n\n              case 17:\n                data = _context.sent;\n                _context.next = 35;\n                break;\n\n              case 20:\n                if (!(responseType === 'arrayBuffer')) {\n                  _context.next = 26;\n                  break;\n                }\n\n                _context.next = 23;\n                return response.arrayBuffer();\n\n              case 23:\n                data = _context.sent;\n                _context.next = 35;\n                break;\n\n              case 26:\n                if (!(responseType === 'blob')) {\n                  _context.next = 32;\n                  break;\n                }\n\n                _context.next = 29;\n                return response.blob();\n\n              case 29:\n                data = _context.sent;\n                _context.next = 35;\n                break;\n\n              case 32:\n                _context.next = 34;\n                return response.text();\n\n              case 34:\n                data = _context.sent;\n\n              case 35:\n                return _context.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 38:\n                _context.prev = 38;\n                _context.t3 = _context[\"catch\"](0);\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: _context.t3\n                });\n\n              case 41:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 38]]);\n      }));\n    }\n  }]);\n\n  return FunctionsClient;\n}();","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,YAAT,QAA6B,UAA7B;AAGA,WAAa,eAAb;EAKE,yBACE,GADF,EAQQ;IAAA,+EAAF,EAAE;IAAA,wBALJ,OAKI;IAAA,IALJ,OAKI,6BALM,EAKN;IAAA,IAJJ,WAII,QAJJ,WAII;;IAAA;;IAEN,KAAK,GAAL,GAAW,GAAX;IACA,KAAK,OAAL,GAAe,OAAf;IACA,KAAK,KAAL,GAAa,YAAY,CAAC,WAAD,CAAzB;EACD;EAED;;;AAGG;;;EAvBL;IAAA;IAAA,OAwBE,iBAAQ,KAAR,EAAqB;MACnB,KAAK,OAAL,CAAa,aAAb,oBAAuC,KAAvC;IACD;IAED;;;;;;;AAOG;;EAnCL;IAAA;IAAA,OAoCQ,gBACJ,YADI,EAEJ,aAFI,EAEiC;;;;;;;;;wBAGT,aAAa,KAAA,IAAb,IAAA,aAAa,KAAA,KAAA,CAAb,GAAA,aAAA,GAAiB,E,EAAnC,O,SAAA,O,EAAS,I,SAAA,I;;gBACA,OAAM,KAAK,KAAL,WAAc,KAAK,GAAnB,cAA0B,YAA1B,GAA0C;kBAC/D,MAAM,EAAE,MADuD;kBAE/D,OAAO,EAAE,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,OAAhC,CAFsD;kBAG/D,IAAI,EAAJ;gBAH+D,CAA1C,CAAN;;;gBAAX,Q;gBAMA,Y,GAAe,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAqB,eAArB,C;;sBACjB,YAAY,IAAI,YAAY,KAAK,M;;;;;8BACH,K;;gBAAM,OAAM,QAAQ,CAAC,IAAT,EAAN;;;;;;kBAA7B,I,EAAM,I;kBAAM,K;;;;wBAIE,aAAa,KAAA,IAAb,IAAA,aAAa,KAAA,KAAA,CAAb,GAAA,aAAA,GAAiB,E,EAAlC,Y,SAAA,Y;;sBACJ,CAAC,YAAD,IAAiB,YAAY,KAAK,M;;;;;;gBAC7B,OAAM,QAAQ,CAAC,IAAT,EAAN;;;gBAAP,I;;;;;sBACS,YAAY,KAAK,a;;;;;;gBACnB,OAAM,QAAQ,CAAC,WAAT,EAAN;;;gBAAP,I;;;;;sBACS,YAAY,KAAK,M;;;;;;gBACnB,OAAM,QAAQ,CAAC,IAAT,EAAN;;;gBAAP,I;;;;;;gBAEO,OAAM,QAAQ,CAAC,IAAT,EAAN;;;gBAAP,I;;;iDAGK;kBAAE,IAAI,EAAJ,IAAF;kBAAQ,KAAK,EAAE;gBAAf,C;;;;;iDAEA;kBAAE,IAAI,EAAE,IAAR;kBAAc,KAAK;gBAAnB,C;;;;;;;;;IAEV;EArEH;;EAAA;AAAA","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { resolveFetch } from './helper';\nexport class FunctionsClient {\n    constructor(url, { headers = {}, customFetch, } = {}) {\n        this.url = url;\n        this.headers = headers;\n        this.fetch = resolveFetch(customFetch);\n    }\n    /**\n     * Updates the authorization header\n     * @params token - the new jwt token sent in the authorisation header\n     */\n    setAuth(token) {\n        this.headers.Authorization = `Bearer ${token}`;\n    }\n    /**\n     * Invokes a function\n     * @param functionName - the name of the function to invoke\n     * @param invokeOptions - object with the following properties\n     * `headers`: object representing the headers to send with the request\n     * `body`: the body of the request\n     * `responseType`: how the response should be parsed. The default is `json`\n     */\n    invoke(functionName, invokeOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { headers, body } = invokeOptions !== null && invokeOptions !== void 0 ? invokeOptions : {};\n                const response = yield this.fetch(`${this.url}/${functionName}`, {\n                    method: 'POST',\n                    headers: Object.assign({}, this.headers, headers),\n                    body,\n                });\n                const isRelayError = response.headers.get('x-relay-error');\n                if (isRelayError && isRelayError === 'true') {\n                    return { data: null, error: new Error(yield response.text()) };\n                }\n                let data;\n                const { responseType } = invokeOptions !== null && invokeOptions !== void 0 ? invokeOptions : {};\n                if (!responseType || responseType === 'json') {\n                    data = yield response.json();\n                }\n                else if (responseType === 'arrayBuffer') {\n                    data = yield response.arrayBuffer();\n                }\n                else if (responseType === 'blob') {\n                    data = yield response.blob();\n                }\n                else {\n                    data = yield response.text();\n                }\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}