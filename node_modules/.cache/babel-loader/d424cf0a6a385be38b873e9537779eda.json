{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_HEADERS, STORAGE_KEY } from './lib/constants';\nimport { stripTrailingSlash, isBrowser } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nimport { SupabaseQueryBuilder } from './lib/SupabaseQueryBuilder';\nimport { SupabaseStorageClient } from '@supabase/storage-js';\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nvar DEFAULT_OPTIONS = {\n  schema: 'public',\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  multiTab: true,\n  headers: DEFAULT_HEADERS\n};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\n\nvar SupabaseClient = /*#__PURE__*/function () {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.headers Any additional headers to send with each network request.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n   * @param options.fetch A custom fetch implementation.\n   */\n  function SupabaseClient(supabaseUrl, supabaseKey, options) {\n    _classCallCheck(this, SupabaseClient);\n\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n\n    var _supabaseUrl = stripTrailingSlash(supabaseUrl);\n\n    var settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    this.restUrl = \"\".concat(_supabaseUrl, \"/rest/v1\");\n    this.realtimeUrl = \"\".concat(_supabaseUrl, \"/realtime/v1\").replace('http', 'ws');\n    this.authUrl = \"\".concat(_supabaseUrl, \"/auth/v1\");\n    this.storageUrl = \"\".concat(_supabaseUrl, \"/storage/v1\");\n\n    var isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/);\n\n    if (isPlatform) {\n      var urlParts = _supabaseUrl.split('.');\n\n      this.functionsUrl = \"\".concat(urlParts[0], \".functions.\").concat(urlParts[1], \".\").concat(urlParts[2]);\n    } else {\n      this.functionsUrl = \"\".concat(_supabaseUrl, \"/functions/v1\");\n    }\n\n    this.schema = settings.schema;\n    this.multiTab = settings.multiTab;\n    this.fetch = settings.fetch;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), options === null || options === void 0 ? void 0 : options.headers);\n    this.shouldThrowOnError = settings.shouldThrowOnError || false;\n    this.auth = this._initSupabaseAuthClient(settings);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n\n    this._listenForAuthEvents();\n\n    this._listenForMultiTabEvents(); // In the future we might allow the user to pass in a logger to receive these events.\n    // this.realtime.onOpen(() => console.log('OPEN'))\n    // this.realtime.onClose(() => console.log('CLOSED'))\n    // this.realtime.onError((e: Error) => console.log('Socket error', e))\n\n  }\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n\n\n  _createClass(SupabaseClient, [{\n    key: \"functions\",\n    get: function get() {\n      return new FunctionsClient(this.functionsUrl, {\n        headers: this._getAuthHeaders(),\n        customFetch: this.fetch\n      });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n\n  }, {\n    key: \"storage\",\n    get: function get() {\n      return new SupabaseStorageClient(this.storageUrl, this._getAuthHeaders(), this.fetch);\n    }\n    /**\n     * Perform a table operation.\n     *\n     * @param table The table name to operate on.\n     */\n\n  }, {\n    key: \"from\",\n    value: function from(table) {\n      var url = \"\".concat(this.restUrl, \"/\").concat(table);\n      return new SupabaseQueryBuilder(url, {\n        headers: this._getAuthHeaders(),\n        schema: this.schema,\n        realtime: this.realtime,\n        table: table,\n        fetch: this.fetch,\n        shouldThrowOnError: this.shouldThrowOnError\n      });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param params  The parameters to pass to the function call.\n     * @param head   When set to true, no data will be returned.\n     * @param count  Count algorithm to use to count rows in a table.\n     *\n     */\n\n  }, {\n    key: \"rpc\",\n    value: function rpc(fn, params) {\n      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          _ref$head = _ref.head,\n          head = _ref$head === void 0 ? false : _ref$head,\n          _ref$count = _ref.count,\n          count = _ref$count === void 0 ? null : _ref$count;\n\n      var rest = this._initPostgRESTClient();\n\n      return rest.rpc(fn, params, {\n        head: head,\n        count: count\n      });\n    }\n    /**\n     * Creates a channel with Broadcast and Presence.\n     * Activated when vsndate query param is present in the WebSocket URL.\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(name, opts) {\n      var _a, _b;\n\n      var userToken = (_b = (_a = this.auth.session()) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;\n\n      if (!this.realtime.isConnected()) {\n        this.realtime.connect();\n      }\n\n      return this.realtime.channel(name, Object.assign(Object.assign({}, opts), {\n        user_token: userToken\n      }));\n    }\n    /**\n     * Closes and removes all subscriptions and returns a list of removed\n     * subscriptions and their errors.\n     */\n\n  }, {\n    key: \"removeAllSubscriptions\",\n    value: function removeAllSubscriptions() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this = this;\n\n        var allSubs, allSubPromises, allRemovedSubs;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                allSubs = this.getSubscriptions().slice();\n                allSubPromises = allSubs.map(function (sub) {\n                  return _this.removeSubscription(sub);\n                });\n                _context.next = 4;\n                return Promise.all(allSubPromises);\n\n              case 4:\n                allRemovedSubs = _context.sent;\n                return _context.abrupt(\"return\", allRemovedSubs.map(function (_ref2, i) {\n                  var error = _ref2.error;\n                  return {\n                    data: {\n                      subscription: allSubs[i]\n                    },\n                    error: error\n                  };\n                }));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Closes and removes a channel and returns the number of open channels.\n     *\n     * @param channel The channel you want to close and remove.\n     */\n\n  }, {\n    key: \"removeChannel\",\n    value: function removeChannel(channel) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _yield$this$_closeSub, error, allChans, openChanCount;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._closeSubscription(channel);\n\n              case 2:\n                _yield$this$_closeSub = _context2.sent;\n                error = _yield$this$_closeSub.error;\n                allChans = this.getSubscriptions();\n                openChanCount = allChans.filter(function (chan) {\n                  return chan.isJoined();\n                }).length;\n\n                if (!(allChans.length === 0)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                _context2.next = 9;\n                return this.realtime.disconnect();\n\n              case 9:\n                return _context2.abrupt(\"return\", {\n                  data: {\n                    openChannels: openChanCount\n                  },\n                  error: error\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Closes and removes a subscription and returns the number of open subscriptions.\n     *\n     * @param subscription The subscription you want to close and remove.\n     */\n\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _yield$this$_closeSub2, error, allSubs, openSubCount;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._closeSubscription(subscription);\n\n              case 2:\n                _yield$this$_closeSub2 = _context3.sent;\n                error = _yield$this$_closeSub2.error;\n                allSubs = this.getSubscriptions();\n                openSubCount = allSubs.filter(function (chan) {\n                  return chan.isJoined();\n                }).length;\n\n                if (!(allSubs.length === 0)) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                _context3.next = 9;\n                return this.realtime.disconnect();\n\n              case 9:\n                return _context3.abrupt(\"return\", {\n                  data: {\n                    openSubscriptions: openSubCount\n                  },\n                  error: error\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"_closeSubscription\",\n    value: function _closeSubscription(subscription) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var error, _yield$this$_unsubscr, unsubError;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                error = null;\n\n                if (subscription.isClosed()) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                _context4.next = 4;\n                return this._unsubscribeSubscription(subscription);\n\n              case 4:\n                _yield$this$_unsubscr = _context4.sent;\n                unsubError = _yield$this$_unsubscr.error;\n                error = unsubError;\n\n              case 7:\n                this.realtime.remove(subscription);\n                return _context4.abrupt(\"return\", {\n                  error: error\n                });\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"_unsubscribeSubscription\",\n    value: function _unsubscribeSubscription(subscription) {\n      return new Promise(function (resolve) {\n        subscription.unsubscribe().receive('ok', function () {\n          return resolve({\n            error: null\n          });\n        }).receive('error', function (error) {\n          return resolve({\n            error: error\n          });\n        }).receive('timeout', function () {\n          return resolve({\n            error: new Error('timed out')\n          });\n        });\n      });\n    }\n    /**\n     * Returns an array of all your subscriptions.\n     */\n\n  }, {\n    key: \"getSubscriptions\",\n    value: function getSubscriptions() {\n      return this.realtime.channels;\n    }\n  }, {\n    key: \"_initSupabaseAuthClient\",\n    value: function _initSupabaseAuthClient(_ref3) {\n      var autoRefreshToken = _ref3.autoRefreshToken,\n          persistSession = _ref3.persistSession,\n          detectSessionInUrl = _ref3.detectSessionInUrl,\n          localStorage = _ref3.localStorage,\n          headers = _ref3.headers,\n          fetch = _ref3.fetch,\n          cookieOptions = _ref3.cookieOptions,\n          multiTab = _ref3.multiTab;\n      var authHeaders = {\n        Authorization: \"Bearer \".concat(this.supabaseKey),\n        apikey: \"\".concat(this.supabaseKey)\n      };\n      return new SupabaseAuthClient({\n        url: this.authUrl,\n        headers: Object.assign(Object.assign({}, headers), authHeaders),\n        autoRefreshToken: autoRefreshToken,\n        persistSession: persistSession,\n        detectSessionInUrl: detectSessionInUrl,\n        localStorage: localStorage,\n        fetch: fetch,\n        cookieOptions: cookieOptions,\n        multiTab: multiTab\n      });\n    }\n  }, {\n    key: \"_initRealtimeClient\",\n    value: function _initRealtimeClient(options) {\n      return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n        params: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.params), {\n          apikey: this.supabaseKey\n        })\n      }));\n    }\n  }, {\n    key: \"_initPostgRESTClient\",\n    value: function _initPostgRESTClient() {\n      return new PostgrestClient(this.restUrl, {\n        headers: this._getAuthHeaders(),\n        schema: this.schema,\n        fetch: this.fetch,\n        throwOnError: this.shouldThrowOnError\n      });\n    }\n  }, {\n    key: \"_getAuthHeaders\",\n    value: function _getAuthHeaders() {\n      var _a, _b;\n\n      var headers = Object.assign({}, this.headers);\n      var authBearer = (_b = (_a = this.auth.session()) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;\n      headers['apikey'] = this.supabaseKey;\n      headers['Authorization'] = headers['Authorization'] || \"Bearer \".concat(authBearer);\n      return headers;\n    }\n  }, {\n    key: \"_listenForMultiTabEvents\",\n    value: function _listenForMultiTabEvents() {\n      var _this2 = this;\n\n      if (!this.multiTab || !isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n        return null;\n      }\n\n      try {\n        return window === null || window === void 0 ? void 0 : window.addEventListener('storage', function (e) {\n          var _a, _b, _c;\n\n          if (e.key === STORAGE_KEY) {\n            var newSession = JSON.parse(String(e.newValue));\n            var accessToken = (_b = (_a = newSession === null || newSession === void 0 ? void 0 : newSession.currentSession) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined;\n            var previousAccessToken = (_c = _this2.auth.session()) === null || _c === void 0 ? void 0 : _c.access_token;\n\n            if (!accessToken) {\n              _this2._handleTokenChanged('SIGNED_OUT', accessToken, 'STORAGE');\n            } else if (!previousAccessToken && accessToken) {\n              _this2._handleTokenChanged('SIGNED_IN', accessToken, 'STORAGE');\n            } else if (previousAccessToken !== accessToken) {\n              _this2._handleTokenChanged('TOKEN_REFRESHED', accessToken, 'STORAGE');\n            }\n          }\n        });\n      } catch (error) {\n        console.error('_listenForMultiTabEvents', error);\n        return null;\n      }\n    }\n  }, {\n    key: \"_listenForAuthEvents\",\n    value: function _listenForAuthEvents() {\n      var _this3 = this;\n\n      var _this$auth$onAuthStat = this.auth.onAuthStateChange(function (event, session) {\n        _this3._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, 'CLIENT');\n      }),\n          data = _this$auth$onAuthStat.data;\n\n      return data;\n    }\n  }, {\n    key: \"_handleTokenChanged\",\n    value: function _handleTokenChanged(event, token, source) {\n      if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n        // Token has changed\n        this.realtime.setAuth(token); // Ideally we should call this.auth.recoverSession() - need to make public\n        // to trigger a \"SIGNED_IN\" event on this client.\n\n        if (source == 'STORAGE') this.auth.setAuth(token);\n        this.changedAccessToken = token;\n      } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n        // Token is removed\n        this.realtime.setAuth(this.supabaseKey);\n        if (source == 'STORAGE') this.auth.signOut();\n      }\n    }\n  }]);\n\n  return SupabaseClient;\n}();\n\nexport { SupabaseClient as default };","map":{"version":3,"mappings":"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","names":["DEFAULT_HEADERS","STORAGE_KEY","stripTrailingSlash","isBrowser","SupabaseAuthClient","SupabaseQueryBuilder","SupabaseStorageClient","FunctionsClient","PostgrestClient","RealtimeClient","DEFAULT_OPTIONS","schema","autoRefreshToken","persistSession","detectSessionInUrl","multiTab","headers","SupabaseClient","supabaseUrl","supabaseKey","options","Error","_supabaseUrl","settings","restUrl","realtimeUrl","replace","authUrl","storageUrl","isPlatform","match","urlParts","split","functionsUrl","fetch","Object","shouldThrowOnError","auth","_initSupabaseAuthClient","realtime","_initRealtimeClient","_listenForAuthEvents","_listenForMultiTabEvents","_getAuthHeaders","customFetch","table","url","fn","params","head","count","rest","_initPostgRESTClient","rpc","name","opts","userToken","session","_a","access_token","_b","isConnected","connect","channel","user_token","allSubs","getSubscriptions","slice","allSubPromises","map","sub","removeSubscription","Promise","all","allRemovedSubs","i","error","data","subscription","_closeSubscription","allChans","openChanCount","filter","chan","isJoined","length","disconnect","openChannels","openSubCount","openSubscriptions","isClosed","_unsubscribeSubscription","unsubError","remove","resolve","unsubscribe","receive","channels","localStorage","cookieOptions","authHeaders","Authorization","apikey","throwOnError","authBearer","window","addEventListener","e","key","newSession","JSON","parse","String","newValue","accessToken","currentSession","undefined","previousAccessToken","_c","_handleTokenChanged","console","onAuthStateChange","event","token","source","changedAccessToken","setAuth","signOut"],"sourceRoot":"","sources":["../../src/SupabaseClient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}