{"ast":null,"code":"/**\n * Helpers to convert the change Payload into native JS types.\n */\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\nexport var PostgresTypes;\n\n(function (PostgresTypes) {\n  PostgresTypes[\"abstime\"] = \"abstime\";\n  PostgresTypes[\"bool\"] = \"bool\";\n  PostgresTypes[\"date\"] = \"date\";\n  PostgresTypes[\"daterange\"] = \"daterange\";\n  PostgresTypes[\"float4\"] = \"float4\";\n  PostgresTypes[\"float8\"] = \"float8\";\n  PostgresTypes[\"int2\"] = \"int2\";\n  PostgresTypes[\"int4\"] = \"int4\";\n  PostgresTypes[\"int4range\"] = \"int4range\";\n  PostgresTypes[\"int8\"] = \"int8\";\n  PostgresTypes[\"int8range\"] = \"int8range\";\n  PostgresTypes[\"json\"] = \"json\";\n  PostgresTypes[\"jsonb\"] = \"jsonb\";\n  PostgresTypes[\"money\"] = \"money\";\n  PostgresTypes[\"numeric\"] = \"numeric\";\n  PostgresTypes[\"oid\"] = \"oid\";\n  PostgresTypes[\"reltime\"] = \"reltime\";\n  PostgresTypes[\"text\"] = \"text\";\n  PostgresTypes[\"time\"] = \"time\";\n  PostgresTypes[\"timestamp\"] = \"timestamp\";\n  PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n  PostgresTypes[\"timetz\"] = \"timetz\";\n  PostgresTypes[\"tsrange\"] = \"tsrange\";\n  PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n})(PostgresTypes || (PostgresTypes = {}));\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\n\n\nexport var convertChangeData = function convertChangeData(columns, record) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _a;\n\n  var skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n  return Object.keys(record).reduce(function (acc, rec_key) {\n    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\n    return acc;\n  }, {});\n};\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\n\nexport var convertColumn = function convertColumn(columnName, columns, record, skipTypes) {\n  var column = columns.find(function (x) {\n    return x.name === columnName;\n  });\n  var colType = column === null || column === void 0 ? void 0 : column.type;\n  var value = record[columnName];\n\n  if (colType && !skipTypes.includes(colType)) {\n    return convertCell(colType, value);\n  }\n\n  return noop(value);\n};\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} stringValue The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\n\nexport var convertCell = function convertCell(type, value) {\n  // if data type is an array\n  if (type.charAt(0) === '_') {\n    var dataType = type.slice(1, type.length);\n    return toArray(value, dataType);\n  } // If not null, convert to correct type.\n\n\n  switch (type) {\n    case PostgresTypes.bool:\n      return toBoolean(value);\n\n    case PostgresTypes.float4:\n    case PostgresTypes.float8:\n    case PostgresTypes.int2:\n    case PostgresTypes.int4:\n    case PostgresTypes.int8:\n    case PostgresTypes.numeric:\n    case PostgresTypes.oid:\n      return toNumber(value);\n\n    case PostgresTypes.json:\n    case PostgresTypes.jsonb:\n      return toJson(value);\n\n    case PostgresTypes.timestamp:\n      return toTimestampString(value);\n    // Format to be consistent with PostgREST\n\n    case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.date: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.daterange:\n    case PostgresTypes.int4range:\n    case PostgresTypes.int8range:\n    case PostgresTypes.money:\n    case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.text:\n    case PostgresTypes.time: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.tsrange:\n    case PostgresTypes.tstzrange:\n      return noop(value);\n\n    default:\n      // Return the value for remaining types\n      return noop(value);\n  }\n};\n\nvar noop = function noop(value) {\n  return value;\n};\n\nexport var toBoolean = function toBoolean(value) {\n  switch (value) {\n    case 't':\n      return true;\n\n    case 'f':\n      return false;\n\n    default:\n      return value;\n  }\n};\nexport var toNumber = function toNumber(value) {\n  if (typeof value === 'string') {\n    var parsedValue = parseFloat(value);\n\n    if (!Number.isNaN(parsedValue)) {\n      return parsedValue;\n    }\n  }\n\n  return value;\n};\nexport var toJson = function toJson(value) {\n  if (typeof value === 'string') {\n    try {\n      return JSON.parse(value);\n    } catch (error) {\n      console.log(\"JSON parse error: \".concat(error));\n      return value;\n    }\n  }\n\n  return value;\n};\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\n\nexport var toArray = function toArray(value, type) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  var lastIdx = value.length - 1;\n  var closeBrace = value[lastIdx];\n  var openBrace = value[0]; // Confirm value is a Postgres array by checking curly brackets\n\n  if (openBrace === '{' && closeBrace === '}') {\n    var arr;\n    var valTrim = value.slice(1, lastIdx); // TODO: find a better solution to separate Postgres array data\n\n    try {\n      arr = JSON.parse('[' + valTrim + ']');\n    } catch (_) {\n      // WARNING: splitting on comma does not cover all edge cases\n      arr = valTrim ? valTrim.split(',') : [];\n    }\n\n    return arr.map(function (val) {\n      return convertCell(type, val);\n    });\n  }\n\n  return value;\n};\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\n\nexport var toTimestampString = function toTimestampString(value) {\n  if (typeof value === 'string') {\n    return value.replace(' ', 'T');\n  }\n\n  return value;\n};","map":{"version":3,"mappings":"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","names":["PostgresTypes","convertChangeData","columns","record","options","skipTypes","_a","Object","keys","reduce","acc","rec_key","convertColumn","columnName","column","find","x","name","colType","type","value","includes","convertCell","noop","charAt","dataType","slice","length","toArray","bool","toBoolean","float4","float8","int2","int4","int8","numeric","oid","toNumber","json","jsonb","toJson","timestamp","toTimestampString","abstime","date","daterange","int4range","int8range","money","reltime","text","time","timestamptz","timetz","tsrange","tstzrange","parsedValue","parseFloat","Number","isNaN","JSON","parse","error","console","log","lastIdx","closeBrace","openBrace","arr","valTrim","_","split","map","val","replace"],"sourceRoot":"","sources":["../../../src/lib/transformers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}