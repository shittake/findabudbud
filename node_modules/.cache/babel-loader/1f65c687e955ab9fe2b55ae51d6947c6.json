{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_HEADERS } from './constants';\nimport { get, post, put, remove } from './fetch';\nimport { resolveFetch } from './helpers';\nexport var StorageBucketApi = /*#__PURE__*/function () {\n  function StorageBucketApi(url) {\n    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var fetch = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, StorageBucketApi);\n\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Retrieves the details of all Storage buckets within an existing product.\n   */\n\n\n  _createClass(StorageBucketApi, [{\n    key: \"listBuckets\",\n    value: function listBuckets() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/bucket\"), {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context.sent;\n                return _context.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: _context.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n\n  }, {\n    key: \"getBucket\",\n    value: function getBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                return _context2.abrupt(\"return\", {\n                  data: null,\n                  error: _context2.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @returns newly created bucket id\n     */\n\n  }, {\n    key: \"createBucket\",\n    value: function createBucket(id) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        public: false\n      };\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/bucket\"), {\n                  id: id,\n                  name: id,\n                  public: options.public\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  data: data.name,\n                  error: null\n                });\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n                return _context3.abrupt(\"return\", {\n                  data: null,\n                  error: _context3.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Updates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     */\n\n  }, {\n    key: \"updateBucket\",\n    value: function updateBucket(id, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return put(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {\n                  id: id,\n                  name: id,\n                  public: options.public\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n                return _context4.abrupt(\"return\", {\n                  data: null,\n                  error: _context4.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n\n  }, {\n    key: \"emptyBucket\",\n    value: function emptyBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id, \"/empty\"), {}, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](0);\n                return _context5.abrupt(\"return\", {\n                  data: null,\n                  error: _context5.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n\n  }, {\n    key: \"deleteBucket\",\n    value: function deleteBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return remove(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {}, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context6.sent;\n                return _context6.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context6.prev = 7;\n                _context6.t0 = _context6[\"catch\"](0);\n                return _context6.abrupt(\"return\", {\n                  data: null,\n                  error: _context6.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 7]]);\n      }));\n    }\n  }]);\n\n  return StorageBucketApi;\n}();","map":{"version":3,"sources":["../../../src/lib/StorageBucketApi.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DEFAULT_HEADERS } from './constants';\nimport { get, post, put, remove } from './fetch';\nimport { resolveFetch } from './helpers';\nexport class StorageBucketApi {\n    constructor(url, headers = {}, fetch) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Retrieves the details of all Storage buckets within an existing product.\n     */\n    listBuckets() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n    getBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @returns newly created bucket id\n     */\n    createBucket(id, options = { public: false }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket`, { id, name: id, public: options.public }, { headers: this.headers });\n                return { data: data.name, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Updates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     */\n    updateBucket(id, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield put(this.fetch, `${this.url}/bucket/${id}`, { id, name: id, public: options.public }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n    emptyBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n    deleteBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n}\n//# sourceMappingURL=StorageBucketApi.js.map"]},"metadata":{},"sourceType":"module"}