{"ast":null,"code":"import _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\nvar Serializer = /*#__PURE__*/function () {\n  function Serializer() {\n    _classCallCheck(this, Serializer);\n\n    this.HEADER_LENGTH = 1;\n  }\n\n  _createClass(Serializer, [{\n    key: \"decode\",\n    value: function decode(rawPayload, callback) {\n      if (rawPayload.constructor === ArrayBuffer) {\n        return callback(this._binaryDecode(rawPayload));\n      }\n\n      if (typeof rawPayload === 'string') {\n        return callback(JSON.parse(rawPayload));\n      }\n\n      return callback({});\n    }\n  }, {\n    key: \"_binaryDecode\",\n    value: function _binaryDecode(buffer) {\n      var view = new DataView(buffer);\n      var decoder = new TextDecoder();\n      return this._decodeBroadcast(buffer, view, decoder);\n    }\n  }, {\n    key: \"_decodeBroadcast\",\n    value: function _decodeBroadcast(buffer, view, decoder) {\n      var topicSize = view.getUint8(1);\n      var eventSize = view.getUint8(2);\n      var offset = this.HEADER_LENGTH + 2;\n      var topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n      offset = offset + topicSize;\n      var event = decoder.decode(buffer.slice(offset, offset + eventSize));\n      offset = offset + eventSize;\n      var data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));\n      return {\n        ref: null,\n        topic: topic,\n        event: event,\n        payload: data\n      };\n    }\n  }]);\n\n  return Serializer;\n}();\n\nexport { Serializer as default };","map":{"version":3,"sources":["../../../src/lib/serializer.ts"],"names":[],"mappings":";;;AAAA;AACA;IAEqB,U;EAArB,sBAAA;IAAA;;IACE,KAAA,aAAA,GAAgB,CAAhB;EA4CD;;;;WA1CC,gBAAO,UAAP,EAAyC,QAAzC,EAA2D;MACzD,IAAI,UAAU,CAAC,WAAX,KAA2B,WAA/B,EAA4C;QAC1C,OAAO,QAAQ,CAAC,KAAK,aAAL,CAAmB,UAAnB,CAAD,CAAf;MACD;;MAED,IAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC;QAClC,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAL,CAAW,UAAX,CAAD,CAAf;MACD;;MAED,OAAO,QAAQ,CAAC,EAAD,CAAf;IACD;;;WAEO,uBAAc,MAAd,EAAiC;MACvC,IAAM,IAAI,GAAG,IAAI,QAAJ,CAAa,MAAb,CAAb;MACA,IAAM,OAAO,GAAG,IAAI,WAAJ,EAAhB;MAEA,OAAO,KAAK,gBAAL,CAAsB,MAAtB,EAA8B,IAA9B,EAAoC,OAApC,CAAP;IACD;;;WAEO,0BACN,MADM,EAEN,IAFM,EAGN,OAHM,EAGc;MAOpB,IAAM,SAAS,GAAG,IAAI,CAAC,QAAL,CAAc,CAAd,CAAlB;MACA,IAAM,SAAS,GAAG,IAAI,CAAC,QAAL,CAAc,CAAd,CAAlB;MACA,IAAI,MAAM,GAAG,KAAK,aAAL,GAAqB,CAAlC;MACA,IAAM,KAAK,GAAG,OAAO,CAAC,MAAR,CAAe,MAAM,CAAC,KAAP,CAAa,MAAb,EAAqB,MAAM,GAAG,SAA9B,CAAf,CAAd;MACA,MAAM,GAAG,MAAM,GAAG,SAAlB;MACA,IAAM,KAAK,GAAG,OAAO,CAAC,MAAR,CAAe,MAAM,CAAC,KAAP,CAAa,MAAb,EAAqB,MAAM,GAAG,SAA9B,CAAf,CAAd;MACA,MAAM,GAAG,MAAM,GAAG,SAAlB;MACA,IAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CACX,OAAO,CAAC,MAAR,CAAe,MAAM,CAAC,KAAP,CAAa,MAAb,EAAqB,MAAM,CAAC,UAA5B,CAAf,CADW,CAAb;MAIA,OAAO;QAAE,GAAG,EAAE,IAAP;QAAa,KAAK,EAAE,KAApB;QAA2B,KAAK,EAAE,KAAlC;QAAyC,OAAO,EAAE;MAAlD,CAAP;IACD;;;;;;SA5CkB,U","sourceRoot":"","sourcesContent":["// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\nexport default class Serializer {\n    constructor() {\n        this.HEADER_LENGTH = 1;\n    }\n    decode(rawPayload, callback) {\n        if (rawPayload.constructor === ArrayBuffer) {\n            return callback(this._binaryDecode(rawPayload));\n        }\n        if (typeof rawPayload === 'string') {\n            return callback(JSON.parse(rawPayload));\n        }\n        return callback({});\n    }\n    _binaryDecode(buffer) {\n        const view = new DataView(buffer);\n        const decoder = new TextDecoder();\n        return this._decodeBroadcast(buffer, view, decoder);\n    }\n    _decodeBroadcast(buffer, view, decoder) {\n        const topicSize = view.getUint8(1);\n        const eventSize = view.getUint8(2);\n        let offset = this.HEADER_LENGTH + 2;\n        const topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n        offset = offset + topicSize;\n        const event = decoder.decode(buffer.slice(offset, offset + eventSize));\n        offset = offset + eventSize;\n        const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));\n        return { ref: null, topic: topic, event: event, payload: data };\n    }\n}\n//# sourceMappingURL=serializer.js.map"]},"metadata":{},"sourceType":"module"}