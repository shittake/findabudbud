{"ast":null,"code":"import _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\n\nvar RealtimeChannel = /*#__PURE__*/function () {\n  function RealtimeChannel(topic) {\n    var _this = this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var socket = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, RealtimeChannel);\n\n    this.topic = topic;\n    this.params = params;\n    this.socket = socket;\n    this.bindings = [];\n    this.state = CHANNEL_STATES.closed;\n    this.joinedOnce = false;\n    this.pushBuffer = [];\n    this.timeout = this.socket.timeout;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.rejoinTimer = new Timer(function () {\n      return _this.rejoinUntilConnected();\n    }, this.socket.reconnectAfterMs);\n    this.joinPush.receive('ok', function () {\n      _this.state = CHANNEL_STATES.joined;\n\n      _this.rejoinTimer.reset();\n\n      _this.pushBuffer.forEach(function (pushEvent) {\n        return pushEvent.send();\n      });\n\n      _this.pushBuffer = [];\n    });\n    this.onClose(function () {\n      _this.rejoinTimer.reset();\n\n      _this.socket.log('channel', \"close \".concat(_this.topic, \" \").concat(_this.joinRef()));\n\n      _this.state = CHANNEL_STATES.closed;\n\n      _this.socket.remove(_this);\n    });\n    this.onError(function (reason) {\n      if (_this.isLeaving() || _this.isClosed()) {\n        return;\n      }\n\n      _this.socket.log('channel', \"error \".concat(_this.topic), reason);\n\n      _this.state = CHANNEL_STATES.errored;\n\n      _this.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive('timeout', function () {\n      if (!_this.isJoining()) {\n        return;\n      }\n\n      _this.socket.log('channel', \"timeout \".concat(_this.topic), _this.joinPush.timeout);\n\n      _this.state = CHANNEL_STATES.errored;\n\n      _this.rejoinTimer.scheduleTimeout();\n    });\n    this.on(CHANNEL_EVENTS.reply, {}, function (payload, ref) {\n      _this.trigger(_this.replyEventName(ref), payload);\n    });\n    this.presence = new RealtimePresence(this);\n  }\n\n  _createClass(RealtimeChannel, [{\n    key: \"list\",\n    value: function list() {\n      return this.presence.list();\n    }\n  }, {\n    key: \"rejoinUntilConnected\",\n    value: function rejoinUntilConnected() {\n      this.rejoinTimer.scheduleTimeout();\n\n      if (this.socket.isConnected()) {\n        this.rejoin();\n      }\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe() {\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n\n      if (this.joinedOnce) {\n        throw \"tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance\";\n      } else {\n        var configs = this.bindings.reduce(function (acc, binding) {\n          var type = binding.type;\n\n          if (!['phx_close', 'phx_error', 'phx_reply', 'presence_diff', 'presence_state'].includes(type)) {\n            acc[type] = binding;\n          }\n\n          return acc;\n        }, {});\n\n        if (Object.keys(configs).length) {\n          this.updateJoinPayload({\n            configs: configs\n          });\n        }\n\n        this.joinedOnce = true;\n        this.rejoin(timeout);\n        return this.joinPush;\n      }\n    }\n    /**\n     * Registers a callback that will be executed when the channel closes.\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(callback) {\n      this.on(CHANNEL_EVENTS.close, {}, callback);\n    }\n    /**\n     * Registers a callback that will be executed when the channel encounteres an error.\n     */\n\n  }, {\n    key: \"onError\",\n    value: function onError(callback) {\n      this.on(CHANNEL_EVENTS.error, {}, function (reason) {\n        return callback(reason);\n      });\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, filter, callback) {\n      this.bindings.push({\n        type: type,\n        filter: filter !== null && filter !== void 0 ? filter : {},\n        callback: callback !== null && callback !== void 0 ? callback : function () {}\n      });\n    }\n  }, {\n    key: \"off\",\n    value: function off(type, filter) {\n      this.bindings = this.bindings.filter(function (bind) {\n        return !(bind.type === type && RealtimeChannel.isEqual(bind.filter, filter));\n      });\n    }\n    /**\n     * Returns `true` if the socket is connected and the channel has been joined.\n     */\n\n  }, {\n    key: \"canPush\",\n    value: function canPush() {\n      return this.socket.isConnected() && this.isJoined();\n    }\n  }, {\n    key: \"push\",\n    value: function push(event, payload) {\n      var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n      if (!this.joinedOnce) {\n        throw \"tried to push '\".concat(event, \"' to '\").concat(this.topic, \"' before joining. Use channel.subscribe() before pushing events\");\n      }\n\n      var pushEvent = new Push(this, event, payload, timeout);\n\n      if (this.canPush()) {\n        pushEvent.send();\n      } else {\n        pushEvent.startTimeout();\n        this.pushBuffer.push(pushEvent);\n      }\n\n      return pushEvent;\n    }\n  }, {\n    key: \"updateJoinPayload\",\n    value: function updateJoinPayload(payload) {\n      this.joinPush.updatePayload(payload);\n    }\n    /**\n     * Leaves the channel.\n     *\n     * Unsubscribes from server events, and instructs channel to terminate on server.\n     * Triggers onClose() hooks.\n     *\n     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n     * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _this2 = this;\n\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n      this.state = CHANNEL_STATES.leaving;\n\n      var onClose = function onClose() {\n        _this2.socket.log('channel', \"leave \".concat(_this2.topic));\n\n        _this2.trigger(CHANNEL_EVENTS.close, 'leave', _this2.joinRef());\n      }; // Destroy joinPush to avoid connection timeouts during unscription phase\n\n\n      this.joinPush.destroy();\n      var leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n      leavePush.receive('ok', function () {\n        return onClose();\n      }).receive('timeout', function () {\n        return onClose();\n      });\n      leavePush.send();\n\n      if (!this.canPush()) {\n        leavePush.trigger('ok', {});\n      }\n\n      return leavePush;\n    }\n    /**\n     * Overridable message hook\n     *\n     * Receives all events for specialized message handling before dispatching to the channel callbacks.\n     * Must return the payload, modified or unmodified.\n     */\n\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(event, payload, ref) {\n      return payload;\n    }\n  }, {\n    key: \"isMember\",\n    value: function isMember(topic) {\n      return this.topic === topic;\n    }\n  }, {\n    key: \"joinRef\",\n    value: function joinRef() {\n      return this.joinPush.ref;\n    }\n  }, {\n    key: \"rejoin\",\n    value: function rejoin() {\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n\n      if (this.isLeaving()) {\n        return;\n      }\n\n      this.socket.leaveOpenTopic(this.topic);\n      this.state = CHANNEL_STATES.joining;\n      this.joinPush.resend(timeout);\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(type, payload, ref) {\n      var close = CHANNEL_EVENTS.close,\n          error = CHANNEL_EVENTS.error,\n          leave = CHANNEL_EVENTS.leave,\n          join = CHANNEL_EVENTS.join;\n      var events = [close, error, leave, join];\n\n      if (ref && events.indexOf(type) >= 0 && ref !== this.joinRef()) {\n        return;\n      }\n\n      var handledPayload = this.onMessage(type, payload, ref);\n\n      if (payload && !handledPayload) {\n        throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n      }\n\n      this.bindings.filter(function (bind) {\n        var _a, _b;\n\n        return (bind === null || bind === void 0 ? void 0 : bind.type) === type && (((_a = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' || ((_b = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _b === void 0 ? void 0 : _b.event) === (payload === null || payload === void 0 ? void 0 : payload.event));\n      }).map(function (bind) {\n        return bind.callback(handledPayload, ref);\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(payload) {\n      var push = this.push(payload.type, payload);\n      return new Promise(function (resolve, reject) {\n        push.receive('ok', function () {\n          return resolve('ok');\n        });\n        push.receive('timeout', function () {\n          return reject('timeout');\n        });\n      });\n    }\n  }, {\n    key: \"replyEventName\",\n    value: function replyEventName(ref) {\n      return \"chan_reply_\".concat(ref);\n    }\n  }, {\n    key: \"isClosed\",\n    value: function isClosed() {\n      return this.state === CHANNEL_STATES.closed;\n    }\n  }, {\n    key: \"isErrored\",\n    value: function isErrored() {\n      return this.state === CHANNEL_STATES.errored;\n    }\n  }, {\n    key: \"isJoined\",\n    value: function isJoined() {\n      return this.state === CHANNEL_STATES.joined;\n    }\n  }, {\n    key: \"isJoining\",\n    value: function isJoining() {\n      return this.state === CHANNEL_STATES.joining;\n    }\n  }, {\n    key: \"isLeaving\",\n    value: function isLeaving() {\n      return this.state === CHANNEL_STATES.leaving;\n    }\n  }], [{\n    key: \"isEqual\",\n    value: function isEqual(obj1, obj2) {\n      if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n        return false;\n      }\n\n      for (var k in obj1) {\n        if (obj1[k] !== obj2[k]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }]);\n\n  return RealtimeChannel;\n}();\n\nexport { RealtimeChannel as default };","map":{"version":3,"mappings":"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","names":["CHANNEL_EVENTS","CHANNEL_STATES","Push","Timer","RealtimePresence","RealtimeChannel","topic","params","socket","closed","timeout","joinPush","join","rejoinTimer","rejoinUntilConnected","reconnectAfterMs","receive","state","joined","reset","pushBuffer","forEach","pushEvent","send","onClose","log","joinRef","remove","onError","reason","isLeaving","isClosed","errored","scheduleTimeout","isJoining","on","reply","payload","ref","trigger","replyEventName","presence","list","isConnected","rejoin","joinedOnce","configs","bindings","reduce","acc","binding","type","includes","Object","keys","length","updateJoinPayload","callback","close","error","filter","push","bind","isEqual","isJoined","event","canPush","startTimeout","updatePayload","leaving","destroy","leavePush","leave","leaveOpenTopic","joining","resend","events","indexOf","handledPayload","onMessage","_a","_b","map","Promise","resolve","reject","obj1","obj2","k"],"sourceRoot":"","sources":["../../src/RealtimeChannel.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}