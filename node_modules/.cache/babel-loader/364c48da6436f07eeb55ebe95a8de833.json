{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nvar RealtimePresence = /*#__PURE__*/function () {\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeSubscription\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  function RealtimePresence(channel, opts) {\n    var _this = this;\n\n    _classCallCheck(this, RealtimePresence);\n\n    this.channel = channel;\n    this.state = {};\n    this.pendingDiffs = [];\n    this.joinRef = null;\n    this.caller = {\n      onJoin: function onJoin() {},\n      onLeave: function onLeave() {},\n      onSync: function onSync() {}\n    };\n    var events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n      state: 'presence_state',\n      diff: 'presence_diff'\n    };\n    this.channel.on(events.state, {}, function (newState) {\n      var _this$caller = _this.caller,\n          onJoin = _this$caller.onJoin,\n          onLeave = _this$caller.onLeave,\n          onSync = _this$caller.onSync;\n      _this.joinRef = _this.channel.joinRef();\n      _this.state = RealtimePresence.syncState(_this.state, newState, onJoin, onLeave);\n\n      _this.pendingDiffs.forEach(function (diff) {\n        _this.state = RealtimePresence.syncDiff(_this.state, diff, onJoin, onLeave);\n      });\n\n      _this.pendingDiffs = [];\n      onSync();\n    });\n    this.channel.on(events.diff, {}, function (diff) {\n      var _this$caller2 = _this.caller,\n          onJoin = _this$caller2.onJoin,\n          onLeave = _this$caller2.onLeave,\n          onSync = _this$caller2.onSync;\n\n      if (_this.inPendingSyncState()) {\n        _this.pendingDiffs.push(diff);\n      } else {\n        _this.state = RealtimePresence.syncDiff(_this.state, diff, onJoin, onLeave);\n        onSync();\n      }\n    });\n  }\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   */\n\n\n  _createClass(RealtimePresence, [{\n    key: \"onJoin\",\n    value: function onJoin(callback) {\n      this.caller.onJoin = callback;\n    }\n  }, {\n    key: \"onLeave\",\n    value: function onLeave(callback) {\n      this.caller.onLeave = callback;\n    }\n  }, {\n    key: \"onSync\",\n    value: function onSync(callback) {\n      this.caller.onSync = callback;\n    }\n  }, {\n    key: \"list\",\n    value: function list(by) {\n      return RealtimePresence.list(this.state, by);\n    }\n  }, {\n    key: \"inPendingSyncState\",\n    value: function inPendingSyncState() {\n      return !this.joinRef || this.joinRef !== this.channel.joinRef();\n    }\n  }], [{\n    key: \"syncState\",\n    value: function syncState(currentState, newState, onJoin, onLeave) {\n      var state = this.cloneDeep(currentState);\n      var transformedState = this.transformState(newState);\n      var joins = {};\n      var leaves = {};\n      this.map(state, function (key, presences) {\n        if (!transformedState[key]) {\n          leaves[key] = presences;\n        }\n      });\n      this.map(transformedState, function (key, newPresences) {\n        var currentPresences = state[key];\n\n        if (currentPresences) {\n          var newPresenceIds = newPresences.map(function (m) {\n            return m.presence_id;\n          });\n          var curPresenceIds = currentPresences.map(function (m) {\n            return m.presence_id;\n          });\n          var joinedPresences = newPresences.filter(function (m) {\n            return curPresenceIds.indexOf(m.presence_id) < 0;\n          });\n          var leftPresences = currentPresences.filter(function (m) {\n            return newPresenceIds.indexOf(m.presence_id) < 0;\n          });\n\n          if (joinedPresences.length > 0) {\n            joins[key] = joinedPresences;\n          }\n\n          if (leftPresences.length > 0) {\n            leaves[key] = leftPresences;\n          }\n        } else {\n          joins[key] = newPresences;\n        }\n      });\n      return this.syncDiff(state, {\n        joins: joins,\n        leaves: leaves\n      }, onJoin, onLeave);\n    }\n    /**\n     * Used to sync a diff of presence join and leave events from the\n     * server, as they happen.\n     *\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n     * `onLeave` callbacks to react to a user joining or leaving from a\n     * device.\n     */\n\n  }, {\n    key: \"syncDiff\",\n    value: function syncDiff(state, diff, onJoin, onLeave) {\n      var _this2 = this;\n\n      var _joins$leaves = {\n        joins: this.transformState(diff.joins),\n        leaves: this.transformState(diff.leaves)\n      },\n          joins = _joins$leaves.joins,\n          leaves = _joins$leaves.leaves;\n\n      if (!onJoin) {\n        onJoin = function onJoin() {};\n      }\n\n      if (!onLeave) {\n        onLeave = function onLeave() {};\n      }\n\n      this.map(joins, function (key, newPresences) {\n        var currentPresences = state[key];\n        state[key] = _this2.cloneDeep(newPresences);\n\n        if (currentPresences) {\n          var _state$key;\n\n          var joinedPresenceIds = state[key].map(function (m) {\n            return m.presence_id;\n          });\n          var curPresences = currentPresences.filter(function (m) {\n            return joinedPresenceIds.indexOf(m.presence_id) < 0;\n          });\n\n          (_state$key = state[key]).unshift.apply(_state$key, _toConsumableArray(curPresences));\n        }\n\n        onJoin(key, currentPresences, newPresences);\n      });\n      this.map(leaves, function (key, leftPresences) {\n        var currentPresences = state[key];\n        if (!currentPresences) return;\n        var presenceIdsToRemove = leftPresences.map(function (m) {\n          return m.presence_id;\n        });\n        currentPresences = currentPresences.filter(function (m) {\n          return presenceIdsToRemove.indexOf(m.presence_id) < 0;\n        });\n        state[key] = currentPresences;\n        onLeave(key, currentPresences, leftPresences);\n        if (currentPresences.length === 0) delete state[key];\n      });\n      return state;\n    }\n    /**\n     * Returns the array of presences, with selected metadata.\n     */\n\n  }, {\n    key: \"list\",\n    value: function list(presences, chooser) {\n      if (!chooser) {\n        chooser = function chooser(_key, pres) {\n          return pres;\n        };\n      }\n\n      return this.map(presences, function (key, presences) {\n        return chooser(key, presences);\n      });\n    }\n  }, {\n    key: \"map\",\n    value: function map(obj, func) {\n      return Object.getOwnPropertyNames(obj).map(function (key) {\n        return func(key, obj[key]);\n      });\n    }\n    /**\n     * Remove 'metas' key\n     * Change 'phx_ref' to 'presence_id'\n     * Remove 'phx_ref' and 'phx_ref_prev'\n     *\n     * @example\n     * // returns {\n     *  abc123: [\n     *    { presence_id: '2', user_id: 1 },\n     *    { presence_id: '3', user_id: 2 }\n     *  ]\n     * }\n     * RealtimePresence.transformState({\n     *  abc123: {\n     *    metas: [\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n     *      { phx_ref: '3', user_id: 2 }\n     *    ]\n     *  }\n     * })\n     */\n\n  }, {\n    key: \"transformState\",\n    value: function transformState(state) {\n      state = this.cloneDeep(state);\n      return Object.getOwnPropertyNames(state).reduce(function (newState, key) {\n        var presences = state[key];\n\n        if ('metas' in presences) {\n          newState[key] = presences.metas.map(function (presence) {\n            presence['presence_id'] = presence['phx_ref'];\n            delete presence['phx_ref'];\n            delete presence['phx_ref_prev'];\n            return presence;\n          });\n        } else {\n          newState[key] = presences;\n        }\n\n        return newState;\n      }, {});\n    }\n  }, {\n    key: \"cloneDeep\",\n    value: function cloneDeep(obj) {\n      return JSON.parse(JSON.stringify(obj));\n    }\n  }]);\n\n  return RealtimePresence;\n}();\n\nexport { RealtimePresence as default };","map":{"version":3,"sources":["../../src/RealtimePresence.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport default class RealtimePresence {\n    /**\n     * Initializes the Presence.\n     *\n     * @param channel - The RealtimeSubscription\n     * @param opts - The options,\n     *        for example `{events: {state: 'state', diff: 'diff'}}`\n     */\n    constructor(channel, opts) {\n        this.channel = channel;\n        this.state = {};\n        this.pendingDiffs = [];\n        this.joinRef = null;\n        this.caller = {\n            onJoin: () => { },\n            onLeave: () => { },\n            onSync: () => { },\n        };\n        const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n            state: 'presence_state',\n            diff: 'presence_diff',\n        };\n        this.channel.on(events.state, {}, (newState) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            this.joinRef = this.channel.joinRef();\n            this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n            this.pendingDiffs.forEach((diff) => {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n            });\n            this.pendingDiffs = [];\n            onSync();\n        });\n        this.channel.on(events.diff, {}, (diff) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            if (this.inPendingSyncState()) {\n                this.pendingDiffs.push(diff);\n            }\n            else {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n                onSync();\n            }\n        });\n    }\n    /**\n     * Used to sync the list of presences on the server with the\n     * client's state.\n     *\n     * An optional `onJoin` and `onLeave` callback can be provided to\n     * react to changes in the client's local presences across\n     * disconnects and reconnects with the server.\n     */\n    static syncState(currentState, newState, onJoin, onLeave) {\n        const state = this.cloneDeep(currentState);\n        const transformedState = this.transformState(newState);\n        const joins = {};\n        const leaves = {};\n        this.map(state, (key, presences) => {\n            if (!transformedState[key]) {\n                leaves[key] = presences;\n            }\n        });\n        this.map(transformedState, (key, newPresences) => {\n            const currentPresences = state[key];\n            if (currentPresences) {\n                const newPresenceIds = newPresences.map((m) => m.presence_id);\n                const curPresenceIds = currentPresences.map((m) => m.presence_id);\n                const joinedPresences = newPresences.filter((m) => curPresenceIds.indexOf(m.presence_id) < 0);\n                const leftPresences = currentPresences.filter((m) => newPresenceIds.indexOf(m.presence_id) < 0);\n                if (joinedPresences.length > 0) {\n                    joins[key] = joinedPresences;\n                }\n                if (leftPresences.length > 0) {\n                    leaves[key] = leftPresences;\n                }\n            }\n            else {\n                joins[key] = newPresences;\n            }\n        });\n        return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);\n    }\n    /**\n     * Used to sync a diff of presence join and leave events from the\n     * server, as they happen.\n     *\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n     * `onLeave` callbacks to react to a user joining or leaving from a\n     * device.\n     */\n    static syncDiff(state, diff, onJoin, onLeave) {\n        const { joins, leaves } = {\n            joins: this.transformState(diff.joins),\n            leaves: this.transformState(diff.leaves),\n        };\n        if (!onJoin) {\n            onJoin = () => { };\n        }\n        if (!onLeave) {\n            onLeave = () => { };\n        }\n        this.map(joins, (key, newPresences) => {\n            const currentPresences = state[key];\n            state[key] = this.cloneDeep(newPresences);\n            if (currentPresences) {\n                const joinedPresenceIds = state[key].map((m) => m.presence_id);\n                const curPresences = currentPresences.filter((m) => joinedPresenceIds.indexOf(m.presence_id) < 0);\n                state[key].unshift(...curPresences);\n            }\n            onJoin(key, currentPresences, newPresences);\n        });\n        this.map(leaves, (key, leftPresences) => {\n            let currentPresences = state[key];\n            if (!currentPresences)\n                return;\n            const presenceIdsToRemove = leftPresences.map((m) => m.presence_id);\n            currentPresences = currentPresences.filter((m) => presenceIdsToRemove.indexOf(m.presence_id) < 0);\n            state[key] = currentPresences;\n            onLeave(key, currentPresences, leftPresences);\n            if (currentPresences.length === 0)\n                delete state[key];\n        });\n        return state;\n    }\n    /**\n     * Returns the array of presences, with selected metadata.\n     */\n    static list(presences, chooser) {\n        if (!chooser) {\n            chooser = (_key, pres) => pres;\n        }\n        return this.map(presences, (key, presences) => chooser(key, presences));\n    }\n    static map(obj, func) {\n        return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));\n    }\n    /**\n     * Remove 'metas' key\n     * Change 'phx_ref' to 'presence_id'\n     * Remove 'phx_ref' and 'phx_ref_prev'\n     *\n     * @example\n     * // returns {\n     *  abc123: [\n     *    { presence_id: '2', user_id: 1 },\n     *    { presence_id: '3', user_id: 2 }\n     *  ]\n     * }\n     * RealtimePresence.transformState({\n     *  abc123: {\n     *    metas: [\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n     *      { phx_ref: '3', user_id: 2 }\n     *    ]\n     *  }\n     * })\n     */\n    static transformState(state) {\n        state = this.cloneDeep(state);\n        return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n            const presences = state[key];\n            if ('metas' in presences) {\n                newState[key] = presences.metas.map((presence) => {\n                    presence['presence_id'] = presence['phx_ref'];\n                    delete presence['phx_ref'];\n                    delete presence['phx_ref_prev'];\n                    return presence;\n                });\n            }\n            else {\n                newState[key] = presences;\n            }\n            return newState;\n        }, {});\n    }\n    static cloneDeep(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    onJoin(callback) {\n        this.caller.onJoin = callback;\n    }\n    onLeave(callback) {\n        this.caller.onLeave = callback;\n    }\n    onSync(callback) {\n        this.caller.onSync = callback;\n    }\n    list(by) {\n        return RealtimePresence.list(this.state, by);\n    }\n    inPendingSyncState() {\n        return !this.joinRef || this.joinRef !== this.channel.joinRef();\n    }\n}\n//# sourceMappingURL=RealtimePresence.js.map"]},"metadata":{},"sourceType":"module"}