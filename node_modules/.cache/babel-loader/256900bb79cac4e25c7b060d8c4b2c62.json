{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\n\nvar PostgrestQueryBuilder = /*#__PURE__*/function (_PostgrestBuilder) {\n  _inherits(PostgrestQueryBuilder, _PostgrestBuilder);\n\n  var _super = _createSuper(PostgrestQueryBuilder);\n\n  function PostgrestQueryBuilder(url) {\n    var _this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch,\n        shouldThrowOnError = _ref.shouldThrowOnError;\n\n    _classCallCheck(this, PostgrestQueryBuilder);\n\n    _this = _super.call(this, {\n      fetch: fetch,\n      shouldThrowOnError: shouldThrowOnError\n    });\n    _this.url = new URL(url);\n    _this.headers = Object.assign({}, headers);\n    _this.schema = schema;\n    return _this;\n  }\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   * @param head  When set to true, select will void data.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  _createClass(PostgrestQueryBuilder, [{\n    key: \"select\",\n    value: function select() {\n      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';\n\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === void 0 ? false : _ref2$head,\n          _ref2$count = _ref2.count,\n          count = _ref2$count === void 0 ? null : _ref2$count;\n\n      this.method = 'GET'; // Remove whitespaces except when quoted\n\n      var quoted = false;\n      var cleanedColumns = columns.split('').map(function (c) {\n        if (/\\s/.test(c) && !quoted) {\n          return '';\n        }\n\n        if (c === '\"') {\n          quoted = !quoted;\n        }\n\n        return c;\n      }).join('');\n      this.url.searchParams.set('select', cleanedColumns);\n\n      if (count) {\n        this.headers['Prefer'] = \"count=\".concat(count);\n      }\n\n      if (head) {\n        this.method = 'HEAD';\n      }\n\n      return new PostgrestFilterBuilder(this);\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(values) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref3$upsert = _ref3.upsert,\n          upsert = _ref3$upsert === void 0 ? false : _ref3$upsert,\n          onConflict = _ref3.onConflict,\n          _ref3$returning = _ref3.returning,\n          returning = _ref3$returning === void 0 ? 'representation' : _ref3$returning,\n          _ref3$count = _ref3.count,\n          count = _ref3$count === void 0 ? null : _ref3$count;\n\n      this.method = 'POST';\n      var prefersHeaders = [\"return=\".concat(returning)];\n      if (upsert) prefersHeaders.push('resolution=merge-duplicates');\n      if (upsert && onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n      this.body = values;\n\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n\n      if (this.headers['Prefer']) {\n        prefersHeaders.unshift(this.headers['Prefer']);\n      }\n\n      this.headers['Prefer'] = prefersHeaders.join(',');\n\n      if (Array.isArray(values)) {\n        var columns = values.reduce(function (acc, x) {\n          return acc.concat(Object.keys(x));\n        }, []);\n\n        if (columns.length > 0) {\n          var uniqueColumns = _toConsumableArray(new Set(columns)).map(function (column) {\n            return \"\\\"\".concat(column, \"\\\"\");\n          });\n\n          this.url.searchParams.set('columns', uniqueColumns.join(','));\n        }\n      }\n\n      return new PostgrestFilterBuilder(this);\n    }\n    /**\n     * Performs an UPSERT into the table.\n     *\n     * @param values  The values to insert.\n     * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n     * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n     * @param count  Count algorithm to use to count rows in a table.\n     * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n     */\n\n  }, {\n    key: \"upsert\",\n    value: function upsert(values) {\n      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          onConflict = _ref4.onConflict,\n          _ref4$returning = _ref4.returning,\n          returning = _ref4$returning === void 0 ? 'representation' : _ref4$returning,\n          _ref4$count = _ref4.count,\n          count = _ref4$count === void 0 ? null : _ref4$count,\n          _ref4$ignoreDuplicate = _ref4.ignoreDuplicates,\n          ignoreDuplicates = _ref4$ignoreDuplicate === void 0 ? false : _ref4$ignoreDuplicate;\n\n      this.method = 'POST';\n      var prefersHeaders = [\"resolution=\".concat(ignoreDuplicates ? 'ignore' : 'merge', \"-duplicates\"), \"return=\".concat(returning)];\n      if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n      this.body = values;\n\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n\n      if (this.headers['Prefer']) {\n        prefersHeaders.unshift(this.headers['Prefer']);\n      }\n\n      this.headers['Prefer'] = prefersHeaders.join(',');\n      return new PostgrestFilterBuilder(this);\n    }\n    /**\n     * Performs an UPDATE on the table.\n     *\n     * @param values  The values to update.\n     * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(values) {\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref5$returning = _ref5.returning,\n          returning = _ref5$returning === void 0 ? 'representation' : _ref5$returning,\n          _ref5$count = _ref5.count,\n          count = _ref5$count === void 0 ? null : _ref5$count;\n\n      this.method = 'PATCH';\n      var prefersHeaders = [\"return=\".concat(returning)];\n      this.body = values;\n\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n\n      if (this.headers['Prefer']) {\n        prefersHeaders.unshift(this.headers['Prefer']);\n      }\n\n      this.headers['Prefer'] = prefersHeaders.join(',');\n      return new PostgrestFilterBuilder(this);\n    }\n    /**\n     * Performs a DELETE on the table.\n     *\n     * @param returning  If `true`, return the deleted row(s) in the response.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref6$returning = _ref6.returning,\n          returning = _ref6$returning === void 0 ? 'representation' : _ref6$returning,\n          _ref6$count = _ref6.count,\n          count = _ref6$count === void 0 ? null : _ref6$count;\n\n      this.method = 'DELETE';\n      var prefersHeaders = [\"return=\".concat(returning)];\n\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n\n      if (this.headers['Prefer']) {\n        prefersHeaders.unshift(this.headers['Prefer']);\n      }\n\n      this.headers['Prefer'] = prefersHeaders.join(',');\n      return new PostgrestFilterBuilder(this);\n    }\n  }]);\n\n  return PostgrestQueryBuilder;\n}(PostgrestBuilder);\n\nexport { PostgrestQueryBuilder as default };","map":{"version":3,"mappings":"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","names":["PostgrestBuilder","PostgrestFilterBuilder","PostgrestQueryBuilder","url","headers","schema","fetch","shouldThrowOnError","URL","Object","columns","head","count","method","quoted","cleanedColumns","split","map","c","test","join","searchParams","set","values","upsert","onConflict","returning","prefersHeaders","push","undefined","body","unshift","Array","isArray","reduce","acc","x","concat","keys","length","uniqueColumns","Set","column","ignoreDuplicates"],"sourceRoot":"","sources":["../../../src/lib/PostgrestQueryBuilder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}