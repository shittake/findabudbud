{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/ericl/findabudbud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\n\nvar PostgrestQueryBuilder = /*#__PURE__*/function (_PostgrestBuilder) {\n  _inherits(PostgrestQueryBuilder, _PostgrestBuilder);\n\n  var _super = _createSuper(PostgrestQueryBuilder);\n\n  function PostgrestQueryBuilder(url) {\n    var _this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch,\n        shouldThrowOnError = _ref.shouldThrowOnError;\n\n    _classCallCheck(this, PostgrestQueryBuilder);\n\n    _this = _super.call(this, {\n      fetch: fetch,\n      shouldThrowOnError: shouldThrowOnError\n    });\n    _this.url = new URL(url);\n    _this.headers = Object.assign({}, headers);\n    _this.schema = schema;\n    return _this;\n  }\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   * @param head  When set to true, select will void data.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  _createClass(PostgrestQueryBuilder, [{\n    key: \"select\",\n    value: function select() {\n      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';\n\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === void 0 ? false : _ref2$head,\n          _ref2$count = _ref2.count,\n          count = _ref2$count === void 0 ? null : _ref2$count;\n\n      this.method = 'GET'; // Remove whitespaces except when quoted\n\n      var quoted = false;\n      var cleanedColumns = columns.split('').map(function (c) {\n        if (/\\s/.test(c) && !quoted) {\n          return '';\n        }\n\n        if (c === '\"') {\n          quoted = !quoted;\n        }\n\n        return c;\n      }).join('');\n      this.url.searchParams.set('select', cleanedColumns);\n\n      if (count) {\n        this.headers['Prefer'] = \"count=\".concat(count);\n      }\n\n      if (head) {\n        this.method = 'HEAD';\n      }\n\n      return new PostgrestFilterBuilder(this);\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(values) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref3$upsert = _ref3.upsert,\n          upsert = _ref3$upsert === void 0 ? false : _ref3$upsert,\n          onConflict = _ref3.onConflict,\n          _ref3$returning = _ref3.returning,\n          returning = _ref3$returning === void 0 ? 'representation' : _ref3$returning,\n          _ref3$count = _ref3.count,\n          count = _ref3$count === void 0 ? null : _ref3$count;\n\n      this.method = 'POST';\n      var prefersHeaders = [\"return=\".concat(returning)];\n      if (upsert) prefersHeaders.push('resolution=merge-duplicates');\n      if (upsert && onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n      this.body = values;\n\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n\n      if (this.headers['Prefer']) {\n        prefersHeaders.unshift(this.headers['Prefer']);\n      }\n\n      this.headers['Prefer'] = prefersHeaders.join(',');\n\n      if (Array.isArray(values)) {\n        var columns = values.reduce(function (acc, x) {\n          return acc.concat(Object.keys(x));\n        }, []);\n\n        if (columns.length > 0) {\n          var uniqueColumns = _toConsumableArray(new Set(columns)).map(function (column) {\n            return \"\\\"\".concat(column, \"\\\"\");\n          });\n\n          this.url.searchParams.set('columns', uniqueColumns.join(','));\n        }\n      }\n\n      return new PostgrestFilterBuilder(this);\n    }\n    /**\n     * Performs an UPSERT into the table.\n     *\n     * @param values  The values to insert.\n     * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n     * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n     * @param count  Count algorithm to use to count rows in a table.\n     * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n     */\n\n  }, {\n    key: \"upsert\",\n    value: function upsert(values) {\n      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          onConflict = _ref4.onConflict,\n          _ref4$returning = _ref4.returning,\n          returning = _ref4$returning === void 0 ? 'representation' : _ref4$returning,\n          _ref4$count = _ref4.count,\n          count = _ref4$count === void 0 ? null : _ref4$count,\n          _ref4$ignoreDuplicate = _ref4.ignoreDuplicates,\n          ignoreDuplicates = _ref4$ignoreDuplicate === void 0 ? false : _ref4$ignoreDuplicate;\n\n      this.method = 'POST';\n      var prefersHeaders = [\"resolution=\".concat(ignoreDuplicates ? 'ignore' : 'merge', \"-duplicates\"), \"return=\".concat(returning)];\n      if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n      this.body = values;\n\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n\n      if (this.headers['Prefer']) {\n        prefersHeaders.unshift(this.headers['Prefer']);\n      }\n\n      this.headers['Prefer'] = prefersHeaders.join(',');\n      return new PostgrestFilterBuilder(this);\n    }\n    /**\n     * Performs an UPDATE on the table.\n     *\n     * @param values  The values to update.\n     * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(values) {\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref5$returning = _ref5.returning,\n          returning = _ref5$returning === void 0 ? 'representation' : _ref5$returning,\n          _ref5$count = _ref5.count,\n          count = _ref5$count === void 0 ? null : _ref5$count;\n\n      this.method = 'PATCH';\n      var prefersHeaders = [\"return=\".concat(returning)];\n      this.body = values;\n\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n\n      if (this.headers['Prefer']) {\n        prefersHeaders.unshift(this.headers['Prefer']);\n      }\n\n      this.headers['Prefer'] = prefersHeaders.join(',');\n      return new PostgrestFilterBuilder(this);\n    }\n    /**\n     * Performs a DELETE on the table.\n     *\n     * @param returning  If `true`, return the deleted row(s) in the response.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref6$returning = _ref6.returning,\n          returning = _ref6$returning === void 0 ? 'representation' : _ref6$returning,\n          _ref6$count = _ref6.count,\n          count = _ref6$count === void 0 ? null : _ref6$count;\n\n      this.method = 'DELETE';\n      var prefersHeaders = [\"return=\".concat(returning)];\n\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n\n      if (this.headers['Prefer']) {\n        prefersHeaders.unshift(this.headers['Prefer']);\n      }\n\n      this.headers['Prefer'] = prefersHeaders.join(',');\n      return new PostgrestFilterBuilder(this);\n    }\n  }]);\n\n  return PostgrestQueryBuilder;\n}(PostgrestBuilder);\n\nexport { PostgrestQueryBuilder as default };","map":{"version":3,"sources":["../../../src/lib/PostgrestQueryBuilder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestQueryBuilder extends PostgrestBuilder {\n    constructor(url, { headers = {}, schema, fetch, shouldThrowOnError, } = {}) {\n        super({ fetch, shouldThrowOnError });\n        this.url = new URL(url);\n        this.headers = Object.assign({}, headers);\n        this.schema = schema;\n    }\n    /**\n     * Performs vertical filtering with SELECT.\n     *\n     * @param columns  The columns to retrieve, separated by commas.\n     * @param head  When set to true, select will void data.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    select(columns = '*', { head = false, count = null, } = {}) {\n        this.method = 'GET';\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = columns\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (count) {\n            this.headers['Prefer'] = `count=${count}`;\n        }\n        if (head) {\n            this.method = 'HEAD';\n        }\n        return new PostgrestFilterBuilder(this);\n    }\n    insert(values, { upsert = false, onConflict, returning = 'representation', count = null, } = {}) {\n        this.method = 'POST';\n        const prefersHeaders = [`return=${returning}`];\n        if (upsert)\n            prefersHeaders.push('resolution=merge-duplicates');\n        if (upsert && onConflict !== undefined)\n            this.url.searchParams.set('on_conflict', onConflict);\n        this.body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n            if (columns.length > 0) {\n                const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`);\n                this.url.searchParams.set('columns', uniqueColumns.join(','));\n            }\n        }\n        return new PostgrestFilterBuilder(this);\n    }\n    /**\n     * Performs an UPSERT into the table.\n     *\n     * @param values  The values to insert.\n     * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n     * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n     * @param count  Count algorithm to use to count rows in a table.\n     * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n     */\n    upsert(values, { onConflict, returning = 'representation', count = null, ignoreDuplicates = false, } = {}) {\n        this.method = 'POST';\n        const prefersHeaders = [\n            `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`,\n            `return=${returning}`,\n        ];\n        if (onConflict !== undefined)\n            this.url.searchParams.set('on_conflict', onConflict);\n        this.body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder(this);\n    }\n    /**\n     * Performs an UPDATE on the table.\n     *\n     * @param values  The values to update.\n     * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    update(values, { returning = 'representation', count = null, } = {}) {\n        this.method = 'PATCH';\n        const prefersHeaders = [`return=${returning}`];\n        this.body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder(this);\n    }\n    /**\n     * Performs a DELETE on the table.\n     *\n     * @param returning  If `true`, return the deleted row(s) in the response.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    delete({ returning = 'representation', count = null, } = {}) {\n        this.method = 'DELETE';\n        const prefersHeaders = [`return=${returning}`];\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder(this);\n    }\n}\n//# sourceMappingURL=PostgrestQueryBuilder.js.map"]},"metadata":{},"sourceType":"module"}